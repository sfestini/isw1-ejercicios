

----STARTUP---- (30 October 2019 17:16:17) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!classDefinition: #TusLibros category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:18:13'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!classDefinition: #TusLibrosTest category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:18:29'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!
!TusLibrosTest methodsFor: 'nil' stamp: 'SF 10/30/2019 17:18:40'!
test01! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:19:49'!
test01TrolleyStartsEmpty! !

!methodRemoval: TusLibrosTest #test01 stamp: 'SF 10/30/2019 17:19:51'!
test01!

!classDefinition: #ShoppingCart category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:21:32'!
Object subclass: #ShoppingCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:21:26' prior: 50777387!
test01TrolleyStartsEmpty

	| cart |
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:21:38' prior: 50777401!
test01TrolleyStartsEmpty

	| cart |
	
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:21:52'!
test01ShoppingCartStartsEmpty

	| cart |
	
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.! !

!methodRemoval: TusLibrosTest #test01TrolleyStartsEmpty stamp: 'SF 10/30/2019 17:21:52'!
test01TrolleyStartsEmpty

	| cart |
	
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.!
!ShoppingCart methodsFor: 'no messages' stamp: 'SF 10/30/2019 17:22:39'!
isEmpty

	^true.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:22:42'!
PASSED!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:34:57'!
test02ShoppingCartIsNotEmptyWhenABookIsAdded

	| cart aBookID aQuantity |
	
	aBookID := 1234.
	aQuantity:= 1.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	
	self deny: cart isEmpty.
	self assert: 1 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:35:29'!
add: aQuantity of: aBookID! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:35:43' prior: 50777444!
add: aQuantity of: aBookID
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:36:00' prior: 50777448!
add: aQuantity of: aBookID
	! !

!classDefinition: #ShoppingCart category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:36:39'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:36:37' prior: 50777453!
add: aQuantity of: aBookID
	
	books := aBookID .! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:39:11'!
amountOfBooks
	
	^ books isNil ifTrue: [^0] ifFalse: [^1]. ! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:40:00' prior: 50777426!
isEmpty

	^self amountOfBooks = 0! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:40:23'!
has: aQuantity of: aBookID

	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:40:28' prior: 50777479!
has: aQuantity of: aBookID

	^true.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:40:30'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 17:40:30'!
PASSED!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:42:03'!
test03ShoppingCartCanAddManyBooksOfTheSameID

	| cart aBookID aQuantity |
	
	aBookID := 1234.
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	
	self deny: cart isEmpty.
	self assert: 3 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .! !

!testRun: #TusLibrosTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/30/2019 17:42:03'!
FAILURE!

!classDefinition: #ShoppingCart category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:42:36'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:42:35' prior: 50777465!
add: aQuantity of: aBookID
	
	books := aBookID .
	quantity:= aQuantity ! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:43:35' prior: 50777470!
amountOfBooks
	
	^quantity ! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:43:37' prior: 50777524!
amountOfBooks
	
	^quantity .! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:43:58'!
FAILURE!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 17:43:58'!
PASSED!

!testRun: #TusLibrosTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/30/2019 17:43:58'!
PASSED!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:43:58'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:45:29'!
initialize

	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:45:35' prior: 50777545!
initialize

	quantity := 0.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:45:38'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 17:45:38'!
PASSED!

!testRun: #TusLibrosTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/30/2019 17:45:38'!
PASSED!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:47:25'!
test04ShoppingCartCanAddBooksOfDifferentIDs

	| cart aBookID anotherBookID aQuantity  anotherQuantity|
	
	aBookID := 1234.
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	
	self deny: cart isEmpty.
	self assert: 3 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .! !
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:48:57' prior: 50777563!
test04ShoppingCartCanAddBooksOfDifferentIDs

	| cart aBookID anotherBookID aQuantity  anotherQuantity|
	
	aBookID := 1234.
	anotherBookID := 1212.
	aQuantity:= 3.
	anotherQuantity := 2.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	cart add: anotherQuantity of: anotherBookID.
	
	self deny: cart isEmpty.
	self assert: 5 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .
	self assert: (cart has: anotherQuantity of: anotherBookID) .! !

!testRun: #TusLibrosTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/30/2019 17:49:11'!
FAILURE!

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/Packages/TerseGuide.pck.st----!

asd := #(123)!

asd!

asd!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:53:34' prior: 50777576!
test04ShoppingCartCanAddBooksOfDifferentIDs

	| cart aBookID anotherBookID aQuantity  anotherQuantity|
	
	aBookID := 1234 .
	anotherBookID := 1212.
	aQuantity:= 3.
	anotherQuantity := 2.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	cart add: anotherQuantity of: anotherBookID.
	
	self deny: cart isEmpty.
	self assert: 5 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .
	self assert: (cart has: anotherQuantity of: anotherBookID) .! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:54:26' prior: 50777549!
initialize

	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:54:40' prior: 50780629!
initialize

	books := Dictionary new.
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:54:59' prior: 50777484!
has: aQuantity of: aBookID

	^true.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:57:06' prior: 50777528!
amountOfBooks
	
	^books do:[:aBookID | books at: aBookID ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:57:55' prior: 50780643!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += books at: aBookID ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:06' prior: 50780648!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:47' prior: 50777518!
add: aQuantity of: aBookID
	
	books at: aBookID put: aQuantity .! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:59:01'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:59:01'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:59:18'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:59:18'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:06:11' prior: 50780654!
amountOfBooks
	
	^books inject: [0] into: [:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:06:36'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:07:54' prior: 50780678!
amountOfBooks
	
	^books inject: 0 into: [:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:08:12'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:08:15'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:08:15'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:12:32' prior: 50780660!
add: aQuantity of: aBookID
	
	books add: aBookID->aQuantity .! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:12:36'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:12:38'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:12:38'!
ERROR!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"!

x _ Dictionary new.							"allocate collection"!

x _ Dictionary new.							"allocate collection"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x at: #a.!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:47' prior: 50780705!
add: aQuantity of: aBookID
	
	books at: aBookID put: aQuantity .! !

x do: [:a | Transcript show: a printString; newLine].  "iterate over the values collection"!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:06' prior: 50780688!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:06' prior: 50780742!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:57:55' prior: 50780748!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += books at: aBookID ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:18:40' prior: 50780754!
amountOfBooks
	
	^books ifEmpty:[^0]  ifNotEmpty:[books keysDo: []] ! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:06' prior: 50780760!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !

----QUIT----(30 October 2019 18:21:22) CuisUniversity-3938.image priorSource: 14319118!

----STARTUP---- (30 October 2019 18:21:28) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


----SNAPSHOT----(30 October 2019 18:25:31) CuisUniversity-3938.image priorSource: 14371870!

----SNAPSHOT----(30 October 2019 18:25:37) CuisUniversity-3938.image priorSource: 14372077!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:21:52' prior: 50777414!
test01ShoppingCartStartsEmpty

	| cart |
	
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:29:57' prior: 50780638!
has: aQuantity of: aBookID


	^true.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:30:25' prior: 50780791!
has: aQuantity of: aBookID

	^true.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:30:48' prior: 50780766!
amountOfBooks
	|totalOfBooks|
	totalOfBooks := 0.
	^books do:[:aBookID  | totalOfBooks += (books at: aBookID) ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:31:03' prior: 50780801!
amountOfBooks
	|totalOfBooks|
	
	totalOfBooks := 0.
	^books do:[:aBookID  | totalOfBooks += (books at: aBookID) ].! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:31:09'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:31:09'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:32:12'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:32:12'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:33:59' prior: 50780808!
amountOfBooks
	|totalOfBooks|
	
	totalOfBooks := 0.
	books do:[:aBookID  | totalOfBooks += (books at: aBookID) ].
	^totalOfBooks.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:34:03'!
PASSED!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:34:08'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:34:09'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:34:09'!
ERROR!

x at: #e put: 3.								"set element at index; see NOTE"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x at: #e put: 3.								"set element at index; see NOTE"!

x at: #e put: 3.								"set element at index; see NOTE"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"!

x _ Dictionary new.							"allocate collection"!

x _ Dictionary new.							"allocate collection"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x at: #e put: 3.								"set element at index; see NOTE"!

x at: #e put: 3.								"set element at index; see NOTE"!

x at: #e put: 3.								"set element at index; see NOTE"!

books at: 1234!

books at: 1234!

books at: 1234!

cart!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:37:25'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:37:45'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:38:12'!
ERROR!

books at: 1234!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:39:53'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:40:26' prior: 50780828!
amountOfBooks
	|totalOfBooks|
	
	totalOfBooks := 0.
	books keysDo:[:aBookID  | totalOfBooks += (books at: aBookID) ].
	^totalOfBooks.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:40:31'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:40:33'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:40:33'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:41:00' prior: 50780912!
amountOfBooks
	|totalOfBooks|
	
	totalOfBooks := 0.
	books keysDo:[:aBookID  | totalOfBooks := totalOfBooks + (books at: aBookID). ].
	^totalOfBooks.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:41:04'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:41:06'!
PASSED!

!testRun: #TusLibrosTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/30/2019 18:41:07'!
PASSED!

!testRun: #TusLibrosTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/30/2019 18:41:09'!
PASSED!

----SNAPSHOT----(30 October 2019 18:41:25) CuisUniversity-3938.image priorSource: 14372170!

----QUIT----(30 October 2019 18:41:44) CuisUniversity-3938.image priorSource: 14377612!

----STARTUP---- (31 October 2019 14:44:20) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/DesignPatterns-Decorator.st----!

!testRun: #TusLibrosTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 16:15:21'!
PASSED!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:23:49'!
test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -5 .
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	cart add: aQuantity of: aBookID.
	
	
	self deny: cart isEmpty.
	self assert: 5 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .! !

----End fileIn of /home/sfestini/Desktop/ingenieria1/isw1-ejercicios/22 - TerniLapilli/TerniLapilli.st----!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:27:42' prior: 50781277!
test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -5 .
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !

!testRun: #TusLibrosTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 16:27:47'!
FAILURE!
!TusLibros class methodsFor: 'nil' stamp: 'SF 10/31/2019 16:28:40'!
errorInvalidBookID

	^ 'Error - Invalid Book ID!!'.! !

!methodRemoval: TusLibros class #errorInvalidBookID stamp: 'SF 10/31/2019 16:28:54'!
errorInvalidBookID

	^ 'Error - Invalid Book ID!!'.!
!ShoppingCart class methodsFor: 'no messages' stamp: 'SF 10/31/2019 16:28:59'!
errorInvalidBookID

	^ 'Error - Invalid Book ID!!'.! !

!classRemoval: #TusLibros stamp: 'SF 10/31/2019 16:29:04'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!classDefinition: #ShoppingCart category: #'TusLibros-Ejercicio' stamp: 'SF 10/31/2019 16:29:33'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/31/2019 16:29:37'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/31/2019 16:29:38'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/31/2019 16:29:39'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 16:29:40'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:31:53' prior: 50780733!
add: aQuantity of: aBookID
	
	aBookID <= 0 ifTrue:[self error: self class errorInvalidBookID .].
	
	books at: aBookID put: aQuantity .! !

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 16:32:24'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:33:15'!
test05ShoppingCartFailsWhenTryingToAddLessThan1Book

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:33:16'!
FAILURE!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:33:27'!
test06ShoppingCartFailsWhenTryingToAddLessThan1Book

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:33:27'!
test05ShoppingCartFailsWhenTryingToAddLessThan1Book

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:33:29'!
FAILURE!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:33:29'!
FAILURE!
!ShoppingCart class methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:33:53'!
errorInvalidBookQuantity

	^ 'Error - Invalid Book Quantity!!'.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:34:23' prior: 50782944!
add: aQuantity of: aBookID
	
	aBookID <= 0 ifTrue:[self error: self class errorInvalidBookID .].
	aQuantity <= 0 ifTrue:[self error: self class errorInvalidBookQuantity .].
	
	books at: aBookID put: aQuantity .! !

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:34:26'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:44:37'!
test07ShoppingCartHasRegisteredReturnsFalseIfTheresNothingRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:45:11'!
test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test07ShoppingCartHasRegisteredReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:45:11'!
test07ShoppingCartHasRegisteredReturnsFalseIfTheresNothingRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:46:52' prior: 50783048!
test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID

	| cart |
	
	cart := ShoppingCart new. 
	
	self deny: (cart has: 5 of: 10).
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:47:36' prior: 50780796!
has: aQuantity of: aBookID

	^ (books at: aBookID) = aQuantity .! !

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:47:45'!
ERROR!

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:47:45'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:48:17' prior: 50783089!
has: aQuantity of: aBookID

	^ (books at: aBookID ifAbsent: [^aQuantity = 0]) = aQuantity .! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:48:24'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:49:22'!
test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID

	| cart |
	
	cart := ShoppingCart new. 
	
	self deny: (cart has: 5 of: 10).
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:49:34' prior: 50783135!
test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID

	| cart aBookID aQuantity |
	
	aBookID := -5 .
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:51:08' prior: 50783143!
test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 3.
	cart := ShoppingCart new. 
	cart add: aQuantity of: aBookID.
	cart remove: 2 of: aBookID.
	
	self assert: (cart has: 1 of: aBookID)! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:52:25'!
remove: aQuantity of: aBookID

	books at: aBookID put: ((books at: aBookID) - aQuantity ).! !

!testRun: #ShoppingCartTest #test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID stamp: 'SF 10/31/2019 16:52:30'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:54:53'!
test09ShoppingCartCantRemoveAnInvalidAmountOfBooks

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= -1.
	cart := ShoppingCart new. 
	cart add: aQuantity of: aBookID.
	cart remove: 2 of: aBookID.
	
	self assert: (cart has: 1 of: aBookID)! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:55:03' prior: 50783180!
test09ShoppingCartCantRemoveAnInvalidAmountOfBooks

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:55:19' prior: 50783191!
test09ShoppingCartCantRemoveAnInvalidAmountOfBooks

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:55:37' prior: 50783170!
remove: aQuantity of: aBookID

	aBookID <= 0 ifTrue:[self error: self class errorInvalidBookID .].
	aQuantity <= 0 ifTrue:[self error: self class errorInvalidBookQuantity .].

	books at: aBookID put: ((books at: aBookID) - aQuantity ).! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:56:18'!
test09ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:56:33'!
test10ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test09ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:56:33'!
test09ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:56:37'!
FAILURE!

!testRun: #ShoppingCartTest #test09ShoppingCartCantRemoveAnInvalidAmountOfBooks stamp: 'SF 10/31/2019 16:56:49'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:56:50'!
FAILURE!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:56:50'!
FAILURE!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:57:08' prior: 50783247!
test10ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartCantRemoveAnInvalidAmountOfBooks stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:57:49'!
test10ShoppingCartCantRemoveBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:57:49'!
test10ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:58:10'!
test10ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:58:17'!
test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test10ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID stamp: 'SF 10/31/2019 16:58:18'!
test10ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:59:06' prior: 50783397!
test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 1 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	cart add: 1 of: aBookID.
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 17:00:19' prior: 50783222!
remove: aQuantity of: aBookID

	aBookID <= 0 ifTrue:[self error: self class errorInvalidBookID .].
	((aQuantity <= 0) or: [(books at: aBookID) < aQuantity ]) ifTrue:[self error: self class errorInvalidBookQuantity .].

	books at: aBookID put: ((books at: aBookID) - aQuantity ).! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartCantRemoveAnInvalidAmountOfBooks stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveBooksFromAnInvalidID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID stamp: 'SF 10/31/2019 17:00:21'!
FAILURE!

!testRun: #ShoppingCartTest #test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID stamp: 'SF 10/31/2019 17:00:21'!
FAILURE!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 17:00:37' prior: 50783430!
test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 1 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	cart add: 1 of: aBookID.
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
							 ]
	
	! !

!testRun: #ShoppingCartTest #test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID stamp: 'SF 10/31/2019 17:00:39'!
PASSED!

----SNAPSHOT----(31 October 2019 17:00:46) CuisUniversity-3938.image priorSource: 14377705!

----QUIT----(31 October 2019 17:00:56) CuisUniversity-3938.image priorSource: 14459993!

----STARTUP---- (4 November 2019 16:12:37) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


!classRemoval: #ShoppingCart stamp: 'SF 11/4/2019 16:12:43'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!classRemoval: #ShoppingCartTest stamp: 'SF 11/4/2019 16:12:44'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'SF 11/4/2019 16:18:10'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'SF 11/4/2019 16:20:30'!
test01TotalCostOfAnEmptyCartIsZero
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:21:31' prior: 50783742!
test01TotalCostOfAnEmptyCartIsZero
	
	|shoppingCart cashier|
	
	shoppingCart := Cart 
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:23:54'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:24:03'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:24:14'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:24:45' prior: 50783747!
test01TotalCostOfAnEmptyCartIsZero
	
	|shoppingCart cashier|
	
	shoppingCart := self createCart .
	
	! !

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/4/2019 16:29:15'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:29:08' prior: 50783768!
test01TotalCostOfAnEmptyCartIsZero
	
	|shoppingCart cashier aListOfPrices |
	
	shoppingCart := self createCart .
	cashier := Cashier newWith: aListOfPrices.
	
	cashier totalCostIOf: shoppingCart .
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:30:38' prior: 50783781!
test01TotalCostOfAnEmptyCartIsZero
	
	|shoppingCart cashier aListOfPrices |
	
	shoppingCart := self createCart .
	cashier := Cashier newWith: aListOfPrices.
	
	self assert: 0 equals: (cashier totalCostIOf: shoppingCart) .
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:30:48' prior: 50783791!
test01TotalCostOfAnEmptyCartIsZero
	
	|shoppingCart cashier aListOfPrices |
	
	shoppingCart := self createCart .
	cashier := Cashier newWith: aListOfPrices.
	
	self assert: 0 equals: (cashier totalCostIOf: shoppingCart).
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:34:27' prior: 50783802!
test01TotalCostOfAnEmptyCartIsZero
	
	|shoppingCart cashier aListOfPrices |
	
	shoppingCart := self createCart .
	cashier := self createCashier.
	
	self assert: 0 equals: (cashier totalCostOf: shoppingCart).
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:34:36' prior: 50783813!
test01TotalCostOfAnEmptyCartIsZero
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	cashier := self createCashier.
	
	self assert: 0 equals: (cashier totalCostOf: shoppingCart).
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:34:46'!
createCashier
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:37:17' prior: 50783832!
createCashier

	^ Cashier with: self defaultListOfPrices.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:37:28'!
defaultListOfPrices

	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:38:11' prior: 50783841!
defaultListOfPrices

	^Dictionary with: 'validBook'->10.! !

Dictionary!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:39:17' prior: 50783845!
defaultListOfPrices

	^Dictionary with: 'validBook'->10.! !

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:39:22'!
ERROR!

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:39:22'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:40:50'!
itemSellByTheStore
	
	^ 'validBook'! !

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:40:53'!
ERROR!

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:40:53'!
ERROR!

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:41:02'!
ERROR!

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:41:11'!
ERROR!

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:41:19'!
ERROR!

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:42:04'!
ERROR!
!Cashier class methodsFor: 'nil' stamp: 'SF 11/4/2019 16:42:48'!
with: aListOfPrices

	^self new initializeWith: aListOfPrices .! !

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/4/2019 16:43:26'!
Object subclass: #Cashier
	instanceVariableNames: 'listOfPrices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'nil' stamp: 'SF 11/4/2019 16:43:24'!
initializeWith: aListOfPrices

	listOfPrices:= aListOfPrices .! !

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:43:35'!
ERROR!

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:43:35'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:44:15'!
totalCostOf: aShoppingCart

	aShoppingCart listProducts! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:46:23' prior: 50783906!
totalCostOf: aShoppingCart
	
	^0.! !

!testRun: #CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 16:46:25'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 16:48:02'!
test02TotalCostOfCartWithBooksIsTheSumOfTheBooksPrices
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	cashier := self createCashier.
	
	self assert: 0 equals: (cashier totalCostOf: shoppingCart).
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 16:50:14' prior: 50783918!
test02TotalCostOfCartWithBooksIsTheSumOfTheBooksPrices
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	shoppingCart add: 'validBook'.
	cashier := self createCashier.
	
	self assert: 10 equals: (cashier totalCostOf: shoppingCart).
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 16:51:03'!
test02TotalCostOfCartWithABookIsTheBooksPrice
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	shoppingCart add: 'validBook'.
	cashier := self createCashier.
	
	self assert: 10 equals: (cashier totalCostOf: shoppingCart).
	
	! !

!methodRemoval: CashierTest #test02TotalCostOfCartWithBooksIsTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 16:51:03'!
test02TotalCostOfCartWithBooksIsTheSumOfTheBooksPrices
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	shoppingCart add: 'validBook'.
	cashier := self createCashier.
	
	self assert: 10 equals: (cashier totalCostOf: shoppingCart).
	
	!

!testRun: #CashierTest #test02TotalCostOfCartWithABookIsTheBooksPrice stamp: 'SF 11/4/2019 16:51:32'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 16:52:37' prior: 50783911!
totalCostOf: aShoppingCart
	
	aShoppingCart listBooks ifEmpty: [^0.] ifNotEmpty: [^10].! !
!CartTest methodsFor: 'tests' stamp: 'SF 11/4/2019 16:53:50' prior: 50783661!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !

----SNAPSHOT----(4 November 2019 16:53:54) CuisUniversity-3938.image priorSource: 14460086!

----QUIT----(4 November 2019 16:53:58) CuisUniversity-3938.image priorSource: 14474526!

----STARTUP---- (4 November 2019 18:42:57) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!

!Cart methodsFor: 'initialization' stamp: 'SF 11/4/2019 18:43:52' prior: 50783582!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'SF 11/4/2019 18:45:28' prior: 50783600!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	items add: anItem withOccurrences: aQuantity .

	"1 to: aQuantity do: [ :aNumber | items add: anItem ]"! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SF 11/4/2019 18:46:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SF 11/4/2019 18:46:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SF 11/4/2019 18:46:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SF 11/4/2019 18:46:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SF 11/4/2019 18:46:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SF 11/4/2019 18:46:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SF 11/4/2019 18:46:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SF 11/4/2019 18:46:09'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'SF 11/4/2019 18:46:38' prior: 50783608!
add: anItem

"	^ self add: 1 of: anItem "! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SF 11/4/2019 18:46:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SF 11/4/2019 18:46:41'!
FAILURE!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SF 11/4/2019 18:46:41'!
FAILURE!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SF 11/4/2019 18:46:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SF 11/4/2019 18:46:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SF 11/4/2019 18:46:41'!
FAILURE!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SF 11/4/2019 18:46:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SF 11/4/2019 18:46:41'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'SF 11/4/2019 18:47:12' prior: 50783648!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: 1 of: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'SF 11/4/2019 18:47:22' prior: 50783675!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add:1 of: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'SF 11/4/2019 18:47:43' prior: 50783703!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SF 11/4/2019 18:48:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SF 11/4/2019 18:48:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SF 11/4/2019 18:48:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SF 11/4/2019 18:48:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SF 11/4/2019 18:48:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SF 11/4/2019 18:48:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SF 11/4/2019 18:48:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SF 11/4/2019 18:48:20'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 18:48:55' prior: 50783939!
test02TotalCostOfCartWithABookIsTheBooksPrice
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	shoppingCart add: 1 of: 'validBook'.
	cashier := self createCashier.
	
	self assert: 10 equals: (cashier totalCostOf: shoppingCart).
	
	! !
!Cart methodsFor: 'adding' stamp: 'SF 11/4/2019 18:55:34' prior: 50784029!
add: anItem

	^ self add: 1 of: anItem! !
!Cart methodsFor: 'adding' stamp: 'SF 11/4/2019 18:55:40' prior: 50783994!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	items add: anItem withOccurrences: aQuantity .! !

!methodRemoval: CashierTest #test02TotalCostOfCartWithABookIsTheBooksPrice stamp: 'SF 11/4/2019 18:56:04'!
test02TotalCostOfCartWithABookIsTheBooksPrice
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	shoppingCart add: 1 of: 'validBook'.
	cashier := self createCashier.
	
	self assert: 10 equals: (cashier totalCostOf: shoppingCart).
	
	!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 18:58:19'!
test01CantCheckoutAnEmptyCart
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	cashier := self createCashier.
	
	self assert: 0 equals: (cashier totalCostOf: shoppingCart).
	
	! !

!methodRemoval: CashierTest #test01TotalCostOfAnEmptyCartIsZero stamp: 'SF 11/4/2019 18:58:19'!
test01TotalCostOfAnEmptyCartIsZero
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	cashier := self createCashier.
	
	self assert: 0 equals: (cashier totalCostOf: shoppingCart).
	
	!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 18:59:11' prior: 50784148!
test01CantCheckoutAnEmptyCart
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	cashier := self createCashier.
	
	self 
		should: [ shoppingCart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = shoppingCart invalidItemErrorMessage.
			self assert: shoppingCart isEmpty ]! !

----End fileIn of /home/sfestini/Desktop/ingenieria1/isw1-ejercicios/20-Stack/Stack-Exercise.st----!
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:02:33'!
itemSoldByTheStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:02:33'!
itemSoldByTheStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:33' prior: 50783683!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSoldByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:33' prior: 50784072!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add:1 of: self itemSoldByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:33' prior: 50783720!
defaultCatalog
	
	^ Array with: self itemSoldByTheStore! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:33' prior: 50783635!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:33' prior: 50783971!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart occurrencesOf: self itemSoldByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:33' prior: 50784080!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByTheStore.
	self assert: (cart includes: self itemSoldByTheStore)! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:33' prior: 50783758!
defaultCatalog
	
	^ Array with: self itemSoldByTheStore! !

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'SF 11/4/2019 19:02:33'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'SF 11/4/2019 19:02:33'!
itemSellByTheStore
	
	^ 'validBook'!
!CartTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:02:52'!
itemNotSoldByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:02:52'!
itemNotSoldByTheStore
	
	^'invalidBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:52' prior: 50784059!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: 1 of: self itemNotSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:52' prior: 50783690!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSoldByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:02:52' prior: 50784166!
test01CantCheckoutAnEmptyCart
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	cashier := self createCashier.
	
	self 
		should: [ shoppingCart add: self itemNotSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = shoppingCart invalidItemErrorMessage.
			self assert: shoppingCart isEmpty ]! !

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'SF 11/4/2019 19:02:52'!
itemNotSellByTheStore
	
	^'invalidBook'!

!methodRemoval: CashierTest #itemNotSellByTheStore stamp: 'SF 11/4/2019 19:02:52'!
itemNotSellByTheStore
	
	^'invalidBook'!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:03:25' prior: 50784672!
test01CantCheckoutAnEmptyCart
	
	|shoppingCart cashier |
	
	shoppingCart := self createCart .
	cashier := self createCashierWith: shoppingCart .
	
	self 
		should: [ shoppingCart add: self itemNotSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = shoppingCart invalidItemErrorMessage.
			self assert: shoppingCart isEmpty ]! !
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:03:56'!
createCashierWith: aShoppingCart

	^ Cashier with: aShoppingCart.! !

!methodRemoval: CashierTest #createCashier stamp: 'SF 11/4/2019 19:04:00'!
createCashier

	^ Cashier with: self defaultListOfPrices.!
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:04:35' prior: 50784624!
defaultCatalog
	
	^ Dictionary with: (self itemSoldByTheStore)->10.! !

!methodRemoval: CashierTest #defaultListOfPrices stamp: 'SF 11/4/2019 19:05:02'!
defaultListOfPrices

	^Dictionary with: 'validBook'->10.!
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:05:11' prior: 50784640!
itemNotSoldByTheStore
	
	^ 'invalidBook'! !
!CartTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:05:50' prior: 50784588!
defaultCatalog
	
	^ Dictionary with: (self itemSoldByTheStore)->10.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SF 11/4/2019 19:05:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SF 11/4/2019 19:05:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SF 11/4/2019 19:05:57'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SF 11/4/2019 19:05:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SF 11/4/2019 19:05:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SF 11/4/2019 19:05:57'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SF 11/4/2019 19:05:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SF 11/4/2019 19:05:57'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'SF 11/4/2019 19:07:26' prior: 50783569!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SF 11/4/2019 19:07:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SF 11/4/2019 19:07:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SF 11/4/2019 19:07:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SF 11/4/2019 19:07:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SF 11/4/2019 19:07:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SF 11/4/2019 19:07:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SF 11/4/2019 19:07:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SF 11/4/2019 19:07:33'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'SF 11/4/2019 19:08:06' prior: 50784636!
itemNotSoldByTheStore
	
	^ 'invalidBook'! !

!methodRemoval: CashierTest #createCashierWith: stamp: 'SF 11/4/2019 19:09:22'!
createCashierWith: aShoppingCart

	^ Cashier with: aShoppingCart.!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:13:14' prior: 50784695!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aBookOfSales |
	
	aBookOfSales := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier with: shoppingCart .
	
	self 
		should: [ cashier checkoutAt: aBookOfSales ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartCheckoutErrorMessage.
			self assert: aBookOfSales isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:14:28' prior: 50784804!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aBookOfSales |
	
	aBookOfSales := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier with: shoppingCart .
	
	self 
		should: [ cashier checkoutAt: aBookOfSales ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartCheckoutErrorMessage.
			self assert: aBookOfSales isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:14:38' prior: 50784821!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier with: shoppingCart .
	
	self 
		should: [ cashier checkoutAt: aSalesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:16:40' prior: 50784838!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 19:16:52'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:17:36'!
emptyCartCheckoutErrorMessage

	! !

!methodRemoval: Cashier #emptyCartCheckoutErrorMessage stamp: 'SF 11/4/2019 19:18:47'!
emptyCartCheckoutErrorMessage

	!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:19:12'!
emptyCartCheckoutErrorMessage

	^ 'Cant checkout an empty cart!!'! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:19:22' prior: 50784854!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !

!methodRemoval: Cashier #totalCostOf: stamp: 'SF 11/4/2019 19:19:28'!
totalCostOf: aShoppingCart
	
	aShoppingCart listBooks ifEmpty: [^0.] ifNotEmpty: [^10].!

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/4/2019 19:21:35'!
Object subclass: #Cashier
	instanceVariableNames: 'listOfPrices cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/4/2019 19:21:36'!
Object subclass: #Cashier
	instanceVariableNames: 'listOfPrices cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:21:34'!
initializeWithCart: aShoppingCart andSalesBook: aSalesBook

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	! !

!methodRemoval: Cashier #initializeWith: stamp: 'SF 11/4/2019 19:21:45'!
initializeWith: aListOfPrices

	listOfPrices:= aListOfPrices .!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:22:24'!
withCart: aShoppingCart andSalesBook: aSalesBook

	^self new initializeWithCart: aShoppingCart andSalesBook: aSalesBook .! !

!methodRemoval: Cashier class #with: stamp: 'SF 11/4/2019 19:22:29'!
with: aListOfPrices

	^self new initializeWith: aListOfPrices .!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:23:29'!
checkout

	^ self error: self class Error.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:23:43' prior: 50784945!
checkout

	^ self error: self class emptyCartCheckoutErrorMessage .! !

Object subclass: #Cashier
	instanceVariableNames: ' cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/4/2019 19:23:50'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 19:23:55'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:25:52'!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:26:15' prior: 50784969!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 'validBook'.
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:30:44' prior: 50784987!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:31:21' prior: 50785006!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 19:31:48'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:33:11' prior: 50784950!
checkout

	^ cart  ifEmpty: [self error: self class emptyCartCheckoutErrorMessage]  
			ifNotEmpty: [^10].! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 19:33:15'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 19:33:15'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:34:37' prior: 50785037!
checkout

	^ cart  isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage]    
						ifFalse: [^10].! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 19:34:40'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 19:34:40'!
FAILURE!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 19:34:40'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:35:43' prior: 50785050!
checkout

	^ cart  isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage]    
						ifFalse: [	salesBook add: 'validBook'.
									^10
							].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:38:16' prior: 50785067!
checkout

	^ cart  isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage]    
						ifFalse: [salesBook add: 'validBook'.
								  ^10
							].! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 19:38:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 19:38:19'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:38:55'!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:39:12' prior: 50785089!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 19:45:19'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 19:45:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 19:45:19'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 19:45:19'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:45:31' prior: 50785104!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 19:45:32'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 19:48:37' prior: 50785075!
checkout

	^ cart  isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage]    
						ifFalse: [salesBook add: 'validBook'.
								  ^ cart totalCost .
							].! !
!Cart methodsFor: 'queries' stamp: 'SF 11/4/2019 19:48:58'!
totalCost

	! !
!Cart methodsFor: 'queries' stamp: 'SF 11/4/2019 19:52:25' prior: 50785162!
totalCost

	^ items inject: 0 into: [:totalCost :aBook | totalCost + (aBook )].! !
!Cart methodsFor: 'queries' stamp: 'SF 11/4/2019 19:53:56' prior: 50785165!
totalCost

	^ items inject: 0 into: [:totalCost :aBook | totalCost + (catalog at: aBook)].! !
!Cart methodsFor: 'initialization' stamp: 'SF 11/4/2019 19:55:14' prior: 50783989!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50784129!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SF 11/4/2019 19:55:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SF 11/4/2019 19:55:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SF 11/4/2019 19:55:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SF 11/4/2019 19:55:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SF 11/4/2019 19:55:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SF 11/4/2019 19:55:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SF 11/4/2019 19:55:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SF 11/4/2019 19:55:38'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 19:55:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 19:55:44'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 19:56:09'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 19:56:09'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 19:56:09'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 19:58:50'!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'SF 11/4/2019 20:00:27'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:00:42' prior: 50785232!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aNumber anOwner|
	
	creditCard := CreditCard withNumber: aNumber anOwner: anOwner . 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:02:17' prior: 50785253!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aNumber anOwner aCv aDate |
	
	creditCard := CreditCard withNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCv. 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart andSalesBook: aSalesBook .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:09:27' prior: 50785270!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear year: 2010 month: 11.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/4/2019 20:11:33'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:11:30'!
withCart: aShoppingCart salesBook: aSalesBook card: aCreditCard .

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	! !

!methodRemoval: Cashier #initializeWithCart:andSalesBook: stamp: 'SF 11/4/2019 20:11:40'!
initializeWithCart: aShoppingCart andSalesBook: aSalesBook

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:12:03' prior: 50784887!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
.
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:12:48' prior: 50785019!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
 .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:13:18' prior: 50785134!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
 .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'SF 11/4/2019 20:14:51'!
CreditCard class
	instanceVariableNames: 'cardNumber'!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'SF 11/4/2019 20:14:53'!
CreditCard class
	instanceVariableNames: 'cardNumber owner'!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'SF 11/4/2019 20:14:54'!
CreditCard class
	instanceVariableNames: 'owner cardNumber expireDate'!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'SF 11/4/2019 20:14:55'!
CreditCard class
	instanceVariableNames: 'expireDate cardNumber owner cv'!
!CreditCard class methodsFor: 'no messages' stamp: 'SF 11/4/2019 20:14:50'!
withNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	cardNumber:= aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV.! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:15:14' prior: 50785289!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := FixedGregorianDate year: 2010 month: 11.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:15:23' prior: 50785409!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := FixedGregorianDate year: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:15:35'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:15:35'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:15:57' prior: 50785317!
withCart: aShoppingCart salesBook: aSalesBook card: aCreditCard .

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:16:12'!
initializeWithCart: aShoppingCart salesBook: aSalesBook card: aCreditCard .

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:16:12' prior: 50785365!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier initializeWithCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
 .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:16:12' prior: 50785349!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier initializeWithCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
 .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:16:12' prior: 50785331!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier initializeWithCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
.
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:16:12' prior: 50785430!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := FixedGregorianDate year: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier initializeWithCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!methodRemoval: Cashier #withCart:salesBook:card: stamp: 'SF 11/4/2019 20:16:12'!
withCart: aShoppingCart salesBook: aSalesBook card: aCreditCard .

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	!

!methodRemoval: Cashier class #withCart:andSalesBook: stamp: 'SF 11/4/2019 20:16:24'!
withCart: aShoppingCart andSalesBook: aSalesBook

	^self new initializeWithCart: aShoppingCart andSalesBook: aSalesBook .!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:17:07'!
withCart: aShoppingCart salesBook: aSalesBook card: aCreditCard

	^ self new initializeWithCart: aShoppingCart salesBook: aSalesBook  card: aCreditCard .! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:17:14'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:17:14'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:17:47' prior: 50785507!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
.
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:17:50'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:17:50'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:17:50'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:17:50'!
ERROR!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:17:50'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:18:07'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:18:22'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:18:22'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:18:34' prior: 50785491!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
 .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:18:36'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:18:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:18:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:18:36'!
ERROR!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:18:36'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:18:44' prior: 50785474!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook aCreditCard |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: aCreditCard .
 .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:18:54' prior: 50785525!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := FixedGregorianDate year: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:18:55'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:19:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:19:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:19:06'!
PASSED!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:19:09'!
ERROR!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:19:09'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:19:16' prior: 50785668!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := FixedGregorianDate year: 2010 month: 11.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:19:17'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:21:00' prior: 50785709!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear year: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:21:04'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:21:04'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:21:04'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:21:04'!
PASSED!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:21:04'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 20:21:36'!
createValidCard
	
	! !
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 20:22:14' prior: 50785771!
createValidCard

	
	| aDate |
	aDate := GregorianMonthOfYear year: 2010 month: November.
	^ CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.! !
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 20:22:21' prior: 50785775!
createValidCard

	| aDate |
	
	aDate := GregorianMonthOfYear year: 2010 month: November.
	^ CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:24:41' prior: 50785733!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:24:44'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'SF 11/4/2019 20:25:48' prior: 50785784!
createValidCard

	| aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	^ CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:26:15' prior: 50785574!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: self createValidCard .
.
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:26:26' prior: 50785619!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: self createValidCard .
 .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:26:49' prior: 50785652!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: self createValidCard .
 .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:26:53'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:26:53'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:26:53'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:26:53'!
PASSED!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:26:53'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:27:22' prior: 50785793!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:29:50' prior: 50785894!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:29:55' prior: 50785912!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:30:08'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:32:09' prior: 50785154!
checkout

	^ self assertValidSale ifTrue: [self error: self class emptyCartCheckoutErrorMessage]    
						ifFalse: [salesBook add: 'validBook'.
								  ^ cart totalCost .
							].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:33:04' prior: 50785966!
checkout

	self assertValidSale. 
	
	salesBook add: 'validBook'.
	^ cart totalCost .
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:35:11'!
assertValidSale

	cart isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage].
	(creditCard isExpiredOn: FixedGregorianDate today) ifTrue: [self error: self class expiredCardErrorMessage].


! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:35:37' prior: 50785981!
assertValidSale

	cart isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage].
	(creditCard isExpiredOn: FixedGregorianDate today) ifTrue: [self error: self class expiredCardErrorMessage].


! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:36:01'!
expiredCardErrorMessage

	^ 'Cant checkout with an expired card!!'! !
!CreditCard methodsFor: 'nil' stamp: 'SF 11/4/2019 20:36:27'!
isExpiredOn: aDate

	! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:36:53' prior: 50785401!
withNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	"initializeWith: "! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:37:19'!
initializeWith: asd

	"cardNumber:= aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV."! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:38:40' prior: 50786010!
withNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	^ self new initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'SF 11/4/2019 20:39:03'!
Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SF 11/4/2019 20:39:04'!
Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SF 11/4/2019 20:39:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber owner expireDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SF 11/4/2019 20:39:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber owner expireDate cv'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:39:02'!
initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	cardNumber:= aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:39:11' prior: 50786060!
initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	cardNumber := aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV.! !

CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'SF 11/4/2019 20:39:17'!
CreditCard class
	instanceVariableNames: ''!

!methodRemoval: CreditCard #initializeWith: stamp: 'SF 11/4/2019 20:39:26'!
initializeWith: asd

	"cardNumber:= aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV."!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:39:42' prior: 50786006!
isExpiredOn: aDate

	

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:41:42' prior: 50786088!
isExpiredOn: aDate

	^ aDate < expireDate .

	

	! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:42:56' prior: 50786092!
isExpiredOn: aDate

	^ True"aDate < expireDate ."

	

	! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:42:59'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:42:59'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:42:59'!
ERROR!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:42:59'!
FAILURE!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:43:13'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:43:39' prior: 50786097!
isExpiredOn: aDate

	^ true"aDate < expireDate ."

	

	! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:43:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:43:48'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:43:48'!
ERROR!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:43:48'!
PASSED!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:43:58' prior: 50786120!
isExpiredOn: aDate

	^ aDate < expireDate .

	

	! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:44:00'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:44:00'!
ERROR!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:44:00'!
ERROR!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:44:00'!
ERROR!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:44:08'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:44:52' prior: 50786139!
isExpiredOn: aDate

	^ expireDate < aDate .

	

	! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/4/2019 20:44:55'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/4/2019 20:44:55'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/4/2019 20:44:55'!
PASSED!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/4/2019 20:44:55'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:48:46'!
test05CantCreateCashierWithACardNumberGreaterThanTheAllowed
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardNumberErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/4/2019 20:50:02' prior: 50786180!
test05CantCreateCashierWithACardNumberGreaterThanTheAllowed
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 12341234123412345 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardNumberErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:55:43' prior: 50785991!
assertValidSale

	cart isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage].
	(creditCard isExpiredOn: FixedGregorianDate today) ifTrue: [self error: self class expiredCardErrorMessage].


! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:59:40' prior: 50786068!
initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	aNumber size = 16 ifTrue: [^ self error: self invalidCardNumberRangeError].

	cardNumber := aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 21:00:24'!
invalidCardNumberRangeError

	^ 'Invalid card number range!!'.! !

----QUIT----(4 November 2019 21:00:29) CuisUniversity-3938.image priorSource: 14474619!

----STARTUP---- (6 November 2019 17:12:40) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:33:56'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:33:56'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'SF 11/6/2019 17:34:27' prior: 50785817!
createValidCard

	| aDate |
	
	aDate := GregorianMonthOfYear yearNumber: (SmallInteger maxVal) month: December.
	^ CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:34:35'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:34:35'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:34:45'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:34:49'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:34:49'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:35:40'!
ERROR!

'asd' length!

'asd' size!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 17:39:07' prior: 50786243!
initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	aNumber decimalDigitLength = 16 ifTrue: [^ self error: self invalidCardNumberRangeError].

	cardNumber := aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV.! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:39:12'!
ERROR!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:39:12'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 17:39:44' prior: 50786299!
initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	aNumber decimalDigitLength = 16 ifFalse: [^ self error: self invalidCardNumberRangeError].

	cardNumber := aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV.! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 17:39:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/6/2019 17:39:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/6/2019 17:39:52'!
PASSED!

!testRun: #CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/6/2019 17:39:53'!
PASSED!

!methodRemoval: CashierTest #test05CantCreateCashierWithACardNumberGreaterThanTheAllowed stamp: 'SF 11/6/2019 17:40:25'!
test05CantCreateCashierWithACardNumberGreaterThanTheAllowed
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 12341234123412345 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier invalidCardNumberErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'SF 11/6/2019 17:43:07'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'SF 11/6/2019 17:44:27'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 17:46:08'!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 17:46:27'!
test04CantCheckoutWithAnExpiredCreditCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !

!methodRemoval: CashierTest #test04CantCreateCashierWithAnExpiredCard stamp: 'SF 11/6/2019 17:46:27'!
test04CantCreateCashierWithAnExpiredCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 17:47:27' prior: 50786385!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !

'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' size!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 17:48:27' prior: 50786462!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ownerNameIsTooLongErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 17:48:54' prior: 50786491!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate cv: 111.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ownerNameIsTooLongErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/6/2019 17:49:00'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 17:51:49' prior: 50786233!
assertValidSale

	cart isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage].
	(creditCard isExpiredOn: FixedGregorianDate today) ifTrue: [self error: self class expiredCardErrorMessage].
	(creditCard nameSizeIsGreaterThan: 30) ifTrue: [self error: self class ].
	

! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 17:52:50' prior: 50786552!
assertValidSale

	cart isEmpty ifTrue: [self error: self class emptyCartCheckoutErrorMessage].
	(creditCard isExpiredOn: FixedGregorianDate today) ifTrue: [self error: self class expiredCardErrorMessage].
	(creditCard nameSizeIsGreaterThan: 30) ifTrue: [self error: self class ownerNameIsTooLongErrorMessage].
	

! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 17:53:56'!
ownerNameIsTooLongErrorMessage

	^ 'Owner name is too long!!'! !

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/6/2019 17:54:05'!
ERROR!

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/6/2019 17:54:05'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 17:54:51'!
nameSizeIsGreaterThan: aNumber

	^ owner size > aNumber.! !

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/6/2019 17:54:57'!
PASSED!

----SNAPSHOT----(6 November 2019 17:58:06) CuisUniversity-3938.image priorSource: 14547425!

----QUIT----(6 November 2019 17:58:08) CuisUniversity-3938.image priorSource: 14558339!

----STARTUP---- (6 November 2019 18:03:07) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber owner expireDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SF 11/6/2019 18:11:08'!
Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber owner expireDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:11:31'!
initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate

	aNumber decimalDigitLength = 16 ifFalse: [^ self error: self invalidCardNumberRangeError].

	cardNumber := aNumber .
	owner := anOwner .
	expireDate := aDate .! !

!methodRemoval: CreditCard #initializeWithNumber:anOwner:expirationDate:cv: stamp: 'SF 11/6/2019 18:11:36'!
initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	aNumber decimalDigitLength = 16 ifFalse: [^ self error: self invalidCardNumberRangeError].

	cardNumber := aNumber .
	owner := anOwner .
	expireDate := aDate .
	cv := aCV.!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:11:46'!
withNumber: aNumber anOwner: anOwner expirationDate: aDate

	^ self new initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate! !

!methodRemoval: CreditCard class #withNumber:anOwner:expirationDate:cv: stamp: 'SF 11/6/2019 18:12:12'!
withNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV

	^ self new initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate cv: aCV!
!CashierTest methodsFor: 'support' stamp: 'SF 11/6/2019 18:12:20' prior: 50786270!
createValidCard

	| aDate |
	
	aDate := GregorianMonthOfYear yearNumber: (SmallInteger maxVal) month: December.
	^ CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate.! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 18:12:31' prior: 50786411!
test04CantCheckoutWithAnExpiredCreditCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 18:12:40' prior: 50786519!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ownerNameIsTooLongErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 18:12:55'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/6/2019 18:12:55'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/6/2019 18:12:55'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithAnExpiredCreditCard stamp: 'SF 11/6/2019 18:12:55'!
PASSED!

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/6/2019 18:12:55'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: #TusLibros stamp: 'SF 11/6/2019 18:13:46'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'SF 11/6/2019 18:16:37'!
test01CreditCardNumberHasToHave16Digits

		! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:19:39' prior: 50786750!
test01CreditCardNumberHasToHave16Digits

	self 
		should: [ CreditCard withNumber: 12341234123412345 anOwner: 'Pepe' expirationDate: (FixedGregorianDate yearNumber: SmallInteger maxVal month: December)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard . ]! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:20:24'!
invalidCardNumberRangeError

	^ 'Invalid card number range!!'.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:20:39' prior: 50786621!
initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate

	cardNumber := aNumber .
	owner := anOwner .
	expireDate := aDate .! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:20:56' prior: 50786643!
withNumber: aNumber anOwner: anOwner expirationDate: aDate

	aNumber decimalDigitLength = 16 ifFalse: [^ self error: self invalidCardNumberRangeError].

	^ self new initializeWithNumber: aNumber anOwner: anOwner expirationDate: aDate! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:21:15' prior: 50786755!
test01CreditCardNumberHasToHave16Digits

	self 
		should: [ CreditCard withNumber: 12341234123412345 anOwner: 'Pepe' expirationDate: (FixedGregorianDate yearNumber: SmallInteger maxVal month: December)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardNumberRangeError . ]! !

!testRun: #CreditCardTest #test01CreditCardNumberHasToHave16Digits stamp: 'SF 11/6/2019 18:21:22'!
ERROR!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:21:58' prior: 50786792!
test01CreditCardNumberHasToHave16Digits

	self 
		should: [ CreditCard withNumber: 12341234123412345 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardNumberRangeError . ]! !

!testRun: #CreditCardTest #test01CreditCardNumberHasToHave16Digits stamp: 'SF 11/6/2019 18:22:01'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:23:31'!
test02CreditCardNumberCantHaveLessThan16Digits

	self 
		should: [ CreditCard withNumber: 123412341234123 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardNumberRangeError . ]! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:23:48'!
test01CreditCardNumberCantHaveMoreThan16Digits

	self 
		should: [ CreditCard withNumber: 12341234123412345 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardNumberRangeError . ]! !

!methodRemoval: CreditCardTest #test01CreditCardNumberHasToHave16Digits stamp: 'SF 11/6/2019 18:23:48'!
test01CreditCardNumberHasToHave16Digits

	self 
		should: [ CreditCard withNumber: 12341234123412345 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December)]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard invalidCardNumberRangeError . ]!

!testRun: #CreditCardTest #test01CreditCardNumberCantHaveMoreThan16Digits stamp: 'SF 11/6/2019 18:23:55'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCantHaveMoreThan16Digits stamp: 'SF 11/6/2019 18:23:55'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberCantHaveLessThan16Digits stamp: 'SF 11/6/2019 18:23:55'!
PASSED!

!methodRemoval: CreditCard #invalidCardNumberRangeError stamp: 'SF 11/6/2019 18:24:15'!
invalidCardNumberRangeError

	^ 'Invalid card number range!!'.!

----SNAPSHOT----(6 November 2019 18:25:03) CuisUniversity-3938.image priorSource: 14558432!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:28:56'!
test03CreditCardKwnosWhenIsExperied
	|creditCard|
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:29:23' prior: 50786889!
test03CreditCardKwnosWhenIsExperied
	|creditCard|
	
	
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:29:52'!
test03CreditCardKnowsWhenIsExpired
	|creditCard|
	
	
	! !

!methodRemoval: CreditCardTest #test03CreditCardKwnosWhenIsExperied stamp: 'SF 11/6/2019 18:29:52'!
test03CreditCardKwnosWhenIsExperied
	|creditCard|
	
	
	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:35:10' prior: 50786899!
test03CreditCardKnowsWhenIsExpired
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self assert: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2011 month: December  dayNumber: 22)).
	
	
	! !

!testRun: #CreditCardTest #test03CreditCardKnowsWhenIsExpired stamp: 'SF 11/6/2019 18:35:11'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCantHaveMoreThan16Digits stamp: 'SF 11/6/2019 18:35:11'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberCantHaveLessThan16Digits stamp: 'SF 11/6/2019 18:35:11'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardKnowsWhenIsExpired stamp: 'SF 11/6/2019 18:35:11'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:37:26'!
test03CreditCardIsExpiredWhenItsExpirationDateIsEarlierInTime
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self assert: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2011 month: December  dayNumber: 22)).
	
	
	! !

!methodRemoval: CreditCardTest #test03CreditCardKnowsWhenIsExpired stamp: 'SF 11/6/2019 18:37:26'!
test03CreditCardKnowsWhenIsExpired
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self assert: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2011 month: December  dayNumber: 22)).
	
	
	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:38:14'!
test03CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self assert: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2000 month: December  dayNumber: 22)).
	
	
	! !

!testRun: #CreditCardTest #test03CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime stamp: 'SF 11/6/2019 18:38:15'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:38:31' prior: 50786963!
test03CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self deny: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2000 month: December  dayNumber: 22)).
	
	
	! !

!testRun: #CreditCardTest #test03CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime stamp: 'SF 11/6/2019 18:38:32'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberCantHaveMoreThan16Digits stamp: 'SF 11/6/2019 18:38:32'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberCantHaveLessThan16Digits stamp: 'SF 11/6/2019 18:38:32'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardIsExpiredWhenItsExpirationDateIsEarlierInTime stamp: 'SF 11/6/2019 18:38:32'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime stamp: 'SF 11/6/2019 18:38:32'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:38:42'!
test04CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self deny: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2000 month: December  dayNumber: 22)).
	
	
	! !

!methodRemoval: CreditCardTest #test03CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime stamp: 'SF 11/6/2019 18:38:42'!
test03CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self deny: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2000 month: December  dayNumber: 22)).
	
	
	!

!testRun: #CreditCardTest #test04CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime stamp: 'SF 11/6/2019 18:38:48'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:40:16'!
test05CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self deny: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2000 month: December  dayNumber: 22)).
	
	
	! !

!methodRemoval: CreditCardTest #test05CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime stamp: 'SF 11/6/2019 18:42:03'!
test05CreditCardIsNotExpiredWhenItsExpirationDateIsForwardInTime
	
	|creditCard|
	
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Pepe' expirationDate: (GregorianMonthOfYear yearNumber: 2010 month: December).
	
	self deny: (creditCard isExpiredOn: (FixedGregorianDate yearNumber: 2000 month: December  dayNumber: 22)).
	
	
	!

Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber owner expireDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'SF 11/6/2019 18:43:31'!
Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber owner expireDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 18:50:27'!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: cashier checkout equals: '0|OK'.
	
	! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 18:50:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/6/2019 18:50:35'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/6/2019 18:50:35'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithAnExpiredCreditCard stamp: 'SF 11/6/2019 18:50:35'!
PASSED!

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/6/2019 18:50:35'!
PASSED!

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/6/2019 18:50:35'!
ERROR!

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/6/2019 18:50:35'!
ERROR!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 18:51:18' prior: 50787088!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: cashier checkout equals: '0|OK'.
	
	! !

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/6/2019 18:51:26'!
FAILURE!

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/6/2019 18:51:26'!
FAILURE!

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/6/2019 18:53:24'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook creditCard merchantProccessorTester'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:53:34' prior: 50785975!
checkout

	self assertValidSale. 
	
	salesBook add: 'validBook'.
	merchantProccessorTester debit: cart totalCost to: creditCard .
! !

Object subclass: #Cashier
	instanceVariableNames: 'merchantProccessorTester cart salesBook creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/6/2019 18:54:05'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProccessorTester cart salesBook creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/6/2019 18:54:14'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProccessor cart salesBook creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:54:14' prior: 50787166!
checkout

	self assertValidSale. 
	
	salesBook add: 'validBook'.
	merchantProccessor debit: cart totalCost to: creditCard .
! !

Object subclass: #MerchantProccessorTester
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProccessorTester category: #TusLibros stamp: 'SF 11/6/2019 18:54:47'!
Object subclass: #MerchantProccessorTester
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProccessorTester methodsFor: 'nil' stamp: 'SF 11/6/2019 18:55:25'!
debit: aTotal to: aCreditCard

	^'0|OK'.! !
!MerchantProccessorTester methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:55:48' prior: 50787214!
debit: aTotal to: aCreditCard

	^'0|OK'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:56:26' prior: 50785465!
initializeWithCart: aShoppingCart salesBook: aSalesBook card: aCreditCard 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	merchantProccessor := MerchantProccessorTester new.! !

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/6/2019 18:56:38'!
FAILURE!

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/6/2019 18:56:38'!
FAILURE!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 18:57:03' prior: 50787134!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: (cashier checkout) equals: '0|OK'.
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:57:15' prior: 50787195!
checkout

	self assertValidSale. 
	
	salesBook add: 'validBook'.
	^merchantProccessor debit: cart totalCost to: creditCard .
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/6/2019 18:57:39' prior: 50787241!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier withCart: shoppingCart salesBook: aSalesBook card: creditCard .
	
	self assert: '0|OK' equals: (cashier checkout).
	
	! !

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/6/2019 18:57:41'!
PASSED!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/6/2019 18:57:41'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/6/2019 18:57:41'!
FAILURE!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/6/2019 18:57:41'!
FAILURE!

!testRun: #CashierTest #test04CantCheckoutWithAnExpiredCreditCard stamp: 'SF 11/6/2019 18:57:41'!
PASSED!

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/6/2019 18:57:42'!
PASSED!

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/6/2019 18:57:42'!
PASSED!

----SNAPSHOT----(6 November 2019 18:58:11) CuisUniversity-3938.image priorSource: 14567533!

----QUIT----(6 November 2019 18:58:22) CuisUniversity-3938.image priorSource: 14580951!

----STARTUP---- (7 November 2019 12:49:03) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!

!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:09:53' prior: 50787224!
initializeWithCart: aShoppingCart salesBook: aSalesBook card: aCreditCard 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	merchantProccessor := MerchantProcessorTester new.! !

!classDefinition: #Cashier category: #TusLibros stamp: 'SF 11/7/2019 13:10:14'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor cart salesBook creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:10:14' prior: 50787257!
checkout

	self assertValidSale. 
	
	salesBook add: 'validBook'.
	^merchantProcessor debit: cart totalCost to: creditCard .
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:10:14' prior: 50787315!
initializeWithCart: aShoppingCart salesBook: aSalesBook card: aCreditCard 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	merchantProcessor := MerchantProcessorTester new.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:22:24'!
for: aShoppingCart toBePayedWith: aSalesBook andRegisteredOn: aCreditCard

	^ self new initializeWithCart: aShoppingCart salesBook: aSalesBook  card: aCreditCard .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:22:24' prior: 50785860!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: aSalesBook andRegisteredOn: self createValidCard .
 .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:22:24' prior: 50787264!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: aSalesBook andRegisteredOn: creditCard .
	
	self assert: '0|OK' equals: (cashier checkout).
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:22:24' prior: 50786693!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: aSalesBook andRegisteredOn: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ownerNameIsTooLongErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:22:24' prior: 50785845!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: aSalesBook andRegisteredOn: self createValidCard .
 .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:22:24' prior: 50785827!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier for: shoppingCart toBePayedWith: aSalesBook andRegisteredOn: self createValidCard .
.
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:22:24' prior: 50786668!
test04CantCheckoutWithAnExpiredCreditCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: aSalesBook andRegisteredOn: creditCard .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !

!methodRemoval: Cashier class #withCart:salesBook:card: stamp: 'SF 11/7/2019 13:22:24'!
withCart: aShoppingCart salesBook: aSalesBook card: aCreditCard

	^ self new initializeWithCart: aShoppingCart salesBook: aSalesBook  card: aCreditCard .!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:22:49' prior: 50787350!
for: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook

	^ self new initializeWithCart: aShoppingCart salesBook: aSalesBook  card: aCreditCard .! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 13:23:34' prior: 50787437!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard andRegisteredOn: aSalesBook  .
.
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 13:23:56' prior: 50787421!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard andRegisteredOn: aSalesBook  .
 .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 13:24:24' prior: 50787359!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard andRegisteredOn: aSalesBook .
 .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 13:24:47' prior: 50787455!
test04CantCheckoutWithAnExpiredCreditCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard andRegisteredOn: aSalesBook .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 13:25:09' prior: 50787393!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard andRegisteredOn: aSalesBook .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ownerNameIsTooLongErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 13:25:32' prior: 50787376!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard andRegisteredOn: aSalesBook .
	
	self assert: '0|OK' equals: (cashier checkout).
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:27:12'!
initializeFor: aShoppingCart toBePayedWith: aSalesBook andRegisteredOn: aCreditCard 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	merchantProcessor := MerchantProcessorTester new.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:27:12' prior: 50787489!
for: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook

	^ self new initializeFor: aShoppingCart toBePayedWith: aSalesBook  andRegisteredOn: aCreditCard .! !

!methodRemoval: Cashier #initializeWithCart:salesBook:card: stamp: 'SF 11/7/2019 13:27:12'!
initializeWithCart: aShoppingCart salesBook: aSalesBook card: aCreditCard 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	merchantProcessor := MerchantProcessorTester new.!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:27:51' prior: 50787627!
for: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook

	^ self new initializeFor: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 13:28:09' prior: 50787617!
initializeFor: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	merchantProcessor := MerchantProcessorTester new.! !

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/7/2019 13:28:31'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 14:10:56' prior: 50787601!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard andRegisteredOn: aSalesBook .
	
	"self assert: '0|OK' equals: (cashier checkout)."
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/6/2019 18:53:34' prior: 50787333!
checkout

	self assertValidSale. 
	
	salesBook add: 'validBook'.
	merchantProccessorTester debit: cart totalCost to: creditCard .
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/4/2019 20:33:04' prior: 50787685!
checkout

	self assertValidSale. 
	
	salesBook add: 'validBook'.
	^ cart totalCost .
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 14:16:15' prior: 50787693!
checkout

	self assertValidSale.  
	
	salesBook add: 'validBook'.
	^ cart totalCost .
! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/7/2019 14:16:20'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/7/2019 14:16:20'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/7/2019 14:16:20'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithAnExpiredCreditCard stamp: 'SF 11/7/2019 14:16:20'!
PASSED!

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/7/2019 14:16:20'!
PASSED!

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/7/2019 14:16:20'!
PASSED!

----SNAPSHOT----(7 November 2019 14:16:26) CuisUniversity-3938.image priorSource: 14581044!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 14:46:39' prior: 50787654!
initializeFor: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	merchantProcessor := MerchantProcessorDummy new.! !
!MerchantProcessorDummy methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 14:54:57'!
debitCreditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName transactionAmount: aTotal

	^ self subclassResponsibility .! !

!methodRemoval: MerchantProcessorDummy #debit:to: stamp: 'SF 11/7/2019 14:55:00'!
debit: aTotal to: aCreditCard

	^'0|OK'.!

MerchantProcessorDummy subclass: #MPBadRequest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPBadRequest category: #TusLibros stamp: 'SF 11/7/2019 14:58:20'!
MerchantProcessorDummy subclass: #MPBadRequest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorDummy subclass: #MPSuccesfulDebit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPSuccesfulDebit category: #TusLibros stamp: 'SF 11/7/2019 14:58:34'!
MerchantProcessorDummy subclass: #MPSuccesfulDebit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessorDummy subclass: #MPDebitError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPDebitError category: #TusLibros stamp: 'SF 11/7/2019 14:58:45'!
MerchantProcessorDummy subclass: #MPDebitError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPBadRequest methodsFor: 'nil' stamp: 'SF 11/7/2019 15:01:37'!
debitCreditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName transactionAmount: aTotal

	^ ''! !
!MPBadRequest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:03:16' prior: 50787787!
debitCreditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName transactionAmount: aTotal

	^ 'bad request'! !
!MPDebitError methodsFor: 'no messages' stamp: 'SF 11/7/2019 15:03:46'!
debitCreditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName transactionAmount: aTotal
	
	^ 'debit error'! !
!MPSuccesfulDebit methodsFor: 'nil' stamp: 'SF 11/7/2019 15:04:05'!
debitCreditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName transactionAmount: aTotal

	^ 'succesful debit'.! !

!classRemoval: #MPBadRequest stamp: 'SF 11/7/2019 15:06:20'!
MerchantProcessorDummy subclass: #MPBadRequest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

'asd' size!
!MerchantProcessorDummy methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:11:08'!
assertCreditCardName: aName

	^ aName size between: 1 and: 30! !

'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' between: 1 and: 43!

'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' size between: 1 and: 43!

'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' size between: 1 and: 44 true !

'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' size between: 1 and: 44  !

!methodRemoval: MerchantProcessorDummy #assertCreditCardName: stamp: 'SF 11/7/2019 15:17:28'!
assertCreditCardName: aName

	^ aName size between: 1 and: 30!
!MerchantProcessorDummy methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:18:16'!
assertCreditCardName: aName

	^ aName size between: 1 and: 30.! !
!MerchantProcessorDummy methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:19:11'!
assertCreditCardNumber: aNumber

	^ (aNumber isKindOf: Integer) and: [aNumber digitLength = 16].! !

!methodRemoval: MerchantProcessorDummy #assertCreditCardNumber: stamp: 'SF 11/7/2019 15:26:50'!
assertCreditCardNumber: aNumber

	^ (aNumber isKindOf: Integer) and: [aNumber digitLength = 16].!

!methodRemoval: MerchantProcessorDummy #assertCreditCardName: stamp: 'SF 11/7/2019 15:26:51'!
assertCreditCardName: aName

	^ aName size between: 1 and: 30.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:28:49' prior: 50787730!
initializeFor: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
"	merchantProcessor := aMerchantProcessor"! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:10'!
initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
"	merchantProcessor := aMerchantProcessor"! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:10' prior: 50787645!
for: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook

	^ self new initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook .! !

!methodRemoval: Cashier #initializeFor:toBePayedWith:andRegisteredOn: stamp: 'SF 11/7/2019 15:29:10'!
initializeFor: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
"	merchantProcessor := aMerchantProcessor"!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:33'!
initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor! !

!methodRemoval: Cashier #initializeFor:toBePayedWith:registeredOn: stamp: 'SF 11/7/2019 15:29:36'!
initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook 

	cart := aShoppingCart .
	salesBook := aSalesBook .	
	creditCard := aCreditCard.
"	merchantProcessor := aMerchantProcessor"!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:52'!
for: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook

	^ self new initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:52' prior: 50787531!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook .
 .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:52' prior: 50787668!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook .
	
	"self assert: '0|OK' equals: (cashier checkout)."
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:52' prior: 50787573!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ownerNameIsTooLongErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:52' prior: 50787515!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook  .
 .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:52' prior: 50787497!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook  .
.
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:29:52' prior: 50787547!
test04CantCheckoutWithAnExpiredCreditCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !

!methodRemoval: Cashier class #for:toBePayedWith:andRegisteredOn: stamp: 'SF 11/7/2019 15:29:52'!
for: aShoppingCart toBePayedWith: aCreditCard andRegisteredOn: aSalesBook

	^ self new initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook .!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:30:29'!
for: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor

	^ self new initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook .! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:30:53' prior: 50788062!
for: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor

	^ self new initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor .! !

!methodRemoval: Cashier class #for:toBePayedWith:registeredOn: stamp: 'SF 11/7/2019 15:31:01'!
for: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook

	^ self new initializeFor: aShoppingCart toBePayedWith: aCreditCard registeredOn: aSalesBook .!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:31:24' prior: 50788010!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook aMerchantProcessor |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:31:45' prior: 50787994!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook aMerchantProcessor |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor.
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:31:56' prior: 50787932!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook aMerchantProcessor |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:32:16' prior: 50788028!
test04CantCheckoutWithAnExpiredCreditCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate aMerchantProcessor |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:32:30' prior: 50787966!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate aMerchantProcessor |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ownerNameIsTooLongErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:32:41' prior: 50787949!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard aMerchantProcessor |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: aMerchantProcessor .
	
	"self assert: '0|OK' equals: (cashier checkout)."
	
	! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/7/2019 15:32:59'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/7/2019 15:32:59'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/7/2019 15:32:59'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithAnExpiredCreditCard stamp: 'SF 11/7/2019 15:32:59'!
PASSED!

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/7/2019 15:32:59'!
PASSED!

!testRun: #CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/7/2019 15:32:59'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'SF 11/7/2019 15:33:42'!
createSuccesfulMerchantProcessor
	
	^ MPSuccesfulDebit new.! !
!CashierTest methodsFor: 'support' stamp: 'SF 11/7/2019 15:33:57'!
createDebitErrorMerchantProcessor
	
	^ MPDebitError new.! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:34:22' prior: 50788091!
test01CantCheckoutAnEmptyCart
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook andProcessedBy: self createSuccesfulMerchantProcessor .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/7/2019 15:34:26'!
PASSED!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:34:39' prior: 50788111!
test02CheckoutOfCartWithABookChecksOutTheBookPrice
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook andProcessedBy: self createSuccesfulMerchantProcessor .
	
	self assert: 10 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:34:49' prior: 50788128!
test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices
	
	| shoppingCart cashier aSalesBook |
	
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	cashier := Cashier for: shoppingCart toBePayedWith: self createValidCard registeredOn: aSalesBook andProcessedBy: self createSuccesfulMerchantProcessor  .
	
	self assert: 50 equals: cashier checkout.
	self assert: 1 equals: aSalesBook size.
! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:34:56' prior: 50788146!
test04CantCheckoutWithAnExpiredCreditCard
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: 2010 month: November.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garcia' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: self createSuccesfulMerchantProcessor  .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier expiredCardErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:35:02' prior: 50788173!
test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters
	
	| shoppingCart cashier aSalesBook  creditCard aDate |
	
	aDate := GregorianMonthOfYear yearNumber: SmallInteger maxVal month: December.
	creditCard := CreditCard withNumber: 1234123412341234 anOwner: 'Lopez Garciaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' expirationDate: aDate.
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: self createSuccesfulMerchantProcessor  .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier ownerNameIsTooLongErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:35:07' prior: 50788203!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: self createSuccesfulMerchantProcessor  .
	
	"self assert: '0|OK' equals: (cashier checkout)."
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:38:08'!
test06CashierFailsAndDoesntRegisterTheSaleIfDebitFails
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: self createSuccesfulMerchantProcessor  .
	
	"self assert: '0|OK' equals: (cashier checkout)."
	
	! !

!methodRemoval: CashierTest #test06CashierCanDebitWithSuccessWhenThereAreNoProblem stamp: 'SF 11/7/2019 15:38:08'!
test06CashierCanDebitWithSuccessWhenThereAreNoProblem
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: self createSuccesfulMerchantProcessor  .
	
	"self assert: '0|OK' equals: (cashier checkout)."
	
	!
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:38:41' prior: 50788386!
test06CashierFailsAndDoesntRegisterTheSaleIfDebitFails
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: self createDebitErrorMerchantProcessor .
	
	
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:39:31' prior: 50788423!
test06CashierFailsAndDoesntRegisterTheSaleIfDebitFails
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: self createDebitErrorMerchantProcessor .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emptyCartCheckoutErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	! !
!CashierTest methodsFor: 'testing' stamp: 'SF 11/7/2019 15:42:09' prior: 50788440!
test06CashierFailsAndDoesntRegisterTheSaleIfDebitFails
	
	| shoppingCart cashier aSalesBook  creditCard |
	
	creditCard := self createValidCard .
	 
	aSalesBook := OrderedCollection new.
	shoppingCart := self createCart .
	shoppingCart add: 5 of: self itemSoldByTheStore .
	
	cashier := Cashier for: shoppingCart toBePayedWith: creditCard registeredOn: aSalesBook andProcessedBy: self createDebitErrorMerchantProcessor .
	
	self 
		should: [ cashier checkout ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier debitFailErrorMessage.
			self assert: aSalesBook isEmpty. ]
	
	! !

!testRun: #CashierTest #test06CashierFailsAndDoesntRegisterTheSaleIfDebitFails stamp: 'SF 11/7/2019 15:42:15'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:42:40'!
debitFailErrorMessage

	^ 'debit error'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:46:06' prior: 50787699!
checkout

	self assertValidSale.  
	
	((merchantProcessor debitCreditCardNumber: creditCard number creditCardExpiration: creditCard expirationDate creditCardOwner: creditCard ownerName transactionAmount: cart totalCost) = 'debit error') ifTrue:[self error: self debitFailErrorMessage ].
	
	salesBook add: 'validBook'.
	^ cart totalCost .
! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:47:04'!
number

		! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:47:17' prior: 50788509!
number

	^ cardNumber .! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:47:27'!
expirationDate

	^ expireDate .! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:47:41'!
ownerName

	^ owner .! !

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/7/2019 15:47:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/7/2019 15:47:48'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/7/2019 15:47:48'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithAnExpiredCreditCard stamp: 'SF 11/7/2019 15:47:49'!
PASSED!

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/7/2019 15:47:49'!
PASSED!

!testRun: #CashierTest #test06CashierFailsAndDoesntRegisterTheSaleIfDebitFails stamp: 'SF 11/7/2019 15:47:49'!
PASSED!
!MerchantProcessorDummy methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:58:45'!
debit: anAmount to: aCreditCard

	^ self subclassResponsibility .! !

!methodRemoval: MerchantProcessorDummy #debitCreditCardNumber:creditCardExpiration:creditCardOwner:transactionAmount: stamp: 'SF 11/7/2019 15:58:51'!
debitCreditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName transactionAmount: aTotal

	^ self subclassResponsibility .!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:59:13' prior: 50788495!
checkout

	self assertValidSale.  
	
	((merchantProcessor debit: cart totalCost to: creditCard) = 'debit error') ifTrue:[self error: self debitFailErrorMessage ].
	
	salesBook add: 'validBook'.
	^ cart totalCost .
! !
!MPDebitError methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:59:29'!
debit: anAmount to: aCreditCard
	
	^ 'debit error'! !

!methodRemoval: MPDebitError #debitCreditCardNumber:creditCardExpiration:creditCardOwner:transactionAmount: stamp: 'SF 11/7/2019 15:59:32'!
debitCreditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName transactionAmount: aTotal
	
	^ 'debit error'!
!MPSuccesfulDebit methodsFor: 'as yet unclassified' stamp: 'SF 11/7/2019 15:59:40'!
debit: anAmount to: aCreditCard

	^ 'succesful debit'.! !

!methodRemoval: MPSuccesfulDebit #debitCreditCardNumber:creditCardExpiration:creditCardOwner:transactionAmount: stamp: 'SF 11/7/2019 15:59:42'!
debitCreditCardNumber: aNumber creditCardExpiration: anExpirationDate creditCardOwner: aName transactionAmount: aTotal

	^ 'succesful debit'.!

!testRun: #CashierTest #test01CantCheckoutAnEmptyCart stamp: 'SF 11/7/2019 15:59:45'!
PASSED!

!testRun: #CashierTest #test02CheckoutOfCartWithABookChecksOutTheBookPrice stamp: 'SF 11/7/2019 15:59:45'!
PASSED!

!testRun: #CashierTest #test03CheckoutOfCartWithManyBooksChecksOutTheSumOfTheBooksPrices stamp: 'SF 11/7/2019 15:59:45'!
PASSED!

!testRun: #CashierTest #test04CantCheckoutWithAnExpiredCreditCard stamp: 'SF 11/7/2019 15:59:45'!
PASSED!

!testRun: #CashierTest #test05CantCheckoutWithACreditCardWhichOwnerNameExceedsThirtyCharacters stamp: 'SF 11/7/2019 15:59:45'!
PASSED!

!testRun: #CashierTest #test06CashierFailsAndDoesntRegisterTheSaleIfDebitFails stamp: 'SF 11/7/2019 15:59:45'!
PASSED!

----SNAPSHOT----(7 November 2019 16:16:06) CuisUniversity-3938.image priorSource: 14594424!


----STARTUP---- (30 October 2019 17:16:17) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!classDefinition: #TusLibros category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:18:13'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!classDefinition: #TusLibrosTest category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:18:29'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!
!TusLibrosTest methodsFor: 'nil' stamp: 'SF 10/30/2019 17:18:40'!
test01! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:19:49'!
test01TrolleyStartsEmpty! !

!methodRemoval: TusLibrosTest #test01 stamp: 'SF 10/30/2019 17:19:51'!
test01!

!classDefinition: #ShoppingCart category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:21:32'!
Object subclass: #ShoppingCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:21:26' prior: 50777387!
test01TrolleyStartsEmpty

	| cart |
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:21:38' prior: 50777401!
test01TrolleyStartsEmpty

	| cart |
	
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:21:52'!
test01ShoppingCartStartsEmpty

	| cart |
	
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.! !

!methodRemoval: TusLibrosTest #test01TrolleyStartsEmpty stamp: 'SF 10/30/2019 17:21:52'!
test01TrolleyStartsEmpty

	| cart |
	
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.!
!ShoppingCart methodsFor: 'no messages' stamp: 'SF 10/30/2019 17:22:39'!
isEmpty

	^true.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:22:42'!
PASSED!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:34:57'!
test02ShoppingCartIsNotEmptyWhenABookIsAdded

	| cart aBookID aQuantity |
	
	aBookID := 1234.
	aQuantity:= 1.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	
	self deny: cart isEmpty.
	self assert: 1 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:35:29'!
add: aQuantity of: aBookID! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:35:43' prior: 50777444!
add: aQuantity of: aBookID
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:36:00' prior: 50777448!
add: aQuantity of: aBookID
	! !

!classDefinition: #ShoppingCart category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:36:39'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:36:37' prior: 50777453!
add: aQuantity of: aBookID
	
	books := aBookID .! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:39:11'!
amountOfBooks
	
	^ books isNil ifTrue: [^0] ifFalse: [^1]. ! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:40:00' prior: 50777426!
isEmpty

	^self amountOfBooks = 0! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:40:23'!
has: aQuantity of: aBookID

	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:40:28' prior: 50777479!
has: aQuantity of: aBookID

	^true.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:40:30'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 17:40:30'!
PASSED!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:42:03'!
test03ShoppingCartCanAddManyBooksOfTheSameID

	| cart aBookID aQuantity |
	
	aBookID := 1234.
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	
	self deny: cart isEmpty.
	self assert: 3 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .! !

!testRun: #TusLibrosTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/30/2019 17:42:03'!
FAILURE!

!classDefinition: #ShoppingCart category: #'TusLibros-Ejercicio' stamp: 'SF 10/30/2019 17:42:36'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:42:35' prior: 50777465!
add: aQuantity of: aBookID
	
	books := aBookID .
	quantity:= aQuantity ! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:43:35' prior: 50777470!
amountOfBooks
	
	^quantity ! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:43:37' prior: 50777524!
amountOfBooks
	
	^quantity .! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:43:58'!
FAILURE!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 17:43:58'!
PASSED!

!testRun: #TusLibrosTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/30/2019 17:43:58'!
PASSED!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:43:58'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:45:29'!
initialize

	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:45:35' prior: 50777545!
initialize

	quantity := 0.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:45:38'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 17:45:38'!
PASSED!

!testRun: #TusLibrosTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/30/2019 17:45:38'!
PASSED!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:47:25'!
test04ShoppingCartCanAddBooksOfDifferentIDs

	| cart aBookID anotherBookID aQuantity  anotherQuantity|
	
	aBookID := 1234.
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	
	self deny: cart isEmpty.
	self assert: 3 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .! !
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:48:57' prior: 50777563!
test04ShoppingCartCanAddBooksOfDifferentIDs

	| cart aBookID anotherBookID aQuantity  anotherQuantity|
	
	aBookID := 1234.
	anotherBookID := 1212.
	aQuantity:= 3.
	anotherQuantity := 2.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	cart add: anotherQuantity of: anotherBookID.
	
	self deny: cart isEmpty.
	self assert: 5 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .
	self assert: (cart has: anotherQuantity of: anotherBookID) .! !

!testRun: #TusLibrosTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/30/2019 17:49:11'!
FAILURE!

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/Packages/TerseGuide.pck.st----!

asd := #(123)!

asd!

asd!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:53:34' prior: 50777576!
test04ShoppingCartCanAddBooksOfDifferentIDs

	| cart aBookID anotherBookID aQuantity  anotherQuantity|
	
	aBookID := 1234 .
	anotherBookID := 1212.
	aQuantity:= 3.
	anotherQuantity := 2.
	cart := ShoppingCart new. 
	
	
	cart add: aQuantity of: aBookID.
	cart add: anotherQuantity of: anotherBookID.
	
	self deny: cart isEmpty.
	self assert: 5 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .
	self assert: (cart has: anotherQuantity of: anotherBookID) .! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:54:26' prior: 50777549!
initialize

	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:54:40' prior: 50780629!
initialize

	books := Dictionary new.
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:54:59' prior: 50777484!
has: aQuantity of: aBookID

	^true.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:57:06' prior: 50777528!
amountOfBooks
	
	^books do:[:aBookID | books at: aBookID ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:57:55' prior: 50780643!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += books at: aBookID ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:06' prior: 50780648!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:47' prior: 50777518!
add: aQuantity of: aBookID
	
	books at: aBookID put: aQuantity .! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:59:01'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:59:01'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:59:18'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 17:59:18'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:06:11' prior: 50780654!
amountOfBooks
	
	^books inject: [0] into: [:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:06:36'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:07:54' prior: 50780678!
amountOfBooks
	
	^books inject: 0 into: [:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:08:12'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:08:15'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:08:15'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:12:32' prior: 50780660!
add: aQuantity of: aBookID
	
	books add: aBookID->aQuantity .! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:12:36'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:12:38'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:12:38'!
ERROR!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"!

x _ Dictionary new.							"allocate collection"!

x _ Dictionary new.							"allocate collection"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x at: #a.!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:47' prior: 50780705!
add: aQuantity of: aBookID
	
	books at: aBookID put: aQuantity .! !

x do: [:a | Transcript show: a printString; newLine].  "iterate over the values collection"!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:06' prior: 50780688!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:06' prior: 50780742!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:57:55' prior: 50780748!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += books at: aBookID ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:18:40' prior: 50780754!
amountOfBooks
	
	^books ifEmpty:[^0]  ifNotEmpty:[books keysDo: []] ! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 17:58:06' prior: 50780760!
amountOfBooks
	
	^books do:[:aBookID :totalOfBooks | totalOfBooks += (books at: aBookID) ].! !

----QUIT----(30 October 2019 18:21:22) CuisUniversity-3938.image priorSource: 14319118!

----STARTUP---- (30 October 2019 18:21:28) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


----SNAPSHOT----(30 October 2019 18:25:31) CuisUniversity-3938.image priorSource: 14371870!

----SNAPSHOT----(30 October 2019 18:25:37) CuisUniversity-3938.image priorSource: 14372077!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/30/2019 17:21:52' prior: 50777414!
test01ShoppingCartStartsEmpty

	| cart |
	
	cart := ShoppingCart new.
	
	self assert: cart isEmpty.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:29:57' prior: 50780638!
has: aQuantity of: aBookID


	^true.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:30:25' prior: 50780791!
has: aQuantity of: aBookID

	^true.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:30:48' prior: 50780766!
amountOfBooks
	|totalOfBooks|
	totalOfBooks := 0.
	^books do:[:aBookID  | totalOfBooks += (books at: aBookID) ].! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:31:03' prior: 50780801!
amountOfBooks
	|totalOfBooks|
	
	totalOfBooks := 0.
	^books do:[:aBookID  | totalOfBooks += (books at: aBookID) ].! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:31:09'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:31:09'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:32:12'!
FAILURE!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:32:12'!
FAILURE!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:33:59' prior: 50780808!
amountOfBooks
	|totalOfBooks|
	
	totalOfBooks := 0.
	books do:[:aBookID  | totalOfBooks += (books at: aBookID) ].
	^totalOfBooks.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:34:03'!
PASSED!

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:34:08'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:34:09'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:34:09'!
ERROR!

x at: #e put: 3.								"set element at index; see NOTE"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x at: #e put: 3.								"set element at index; see NOTE"!

x at: #e put: 3.								"set element at index; see NOTE"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"!

| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"!

x _ Dictionary new.							"allocate collection"!

x _ Dictionary new.							"allocate collection"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"!

x at: #e put: 3.								"set element at index; see NOTE"!

x at: #e put: 3.								"set element at index; see NOTE"!

x at: #e put: 3.								"set element at index; see NOTE"!

books at: 1234!

books at: 1234!

books at: 1234!

cart!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:37:25'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:37:45'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:38:12'!
ERROR!

books at: 1234!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:39:53'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:40:26' prior: 50780828!
amountOfBooks
	|totalOfBooks|
	
	totalOfBooks := 0.
	books keysDo:[:aBookID  | totalOfBooks += (books at: aBookID) ].
	^totalOfBooks.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:40:31'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:40:33'!
ERROR!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:40:33'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/30/2019 18:41:00' prior: 50780912!
amountOfBooks
	|totalOfBooks|
	
	totalOfBooks := 0.
	books keysDo:[:aBookID  | totalOfBooks := totalOfBooks + (books at: aBookID). ].
	^totalOfBooks.! !

!testRun: #TusLibrosTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/30/2019 18:41:04'!
PASSED!

!testRun: #TusLibrosTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/30/2019 18:41:06'!
PASSED!

!testRun: #TusLibrosTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/30/2019 18:41:07'!
PASSED!

!testRun: #TusLibrosTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/30/2019 18:41:09'!
PASSED!

----SNAPSHOT----(30 October 2019 18:41:25) CuisUniversity-3938.image priorSource: 14372170!

----QUIT----(30 October 2019 18:41:44) CuisUniversity-3938.image priorSource: 14377612!

----STARTUP---- (31 October 2019 14:44:20) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3938.image!


----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/DesignPatterns-Decorator.st----!

!testRun: #TusLibrosTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 16:15:21'!
PASSED!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:23:49'!
test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -5 .
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	cart add: aQuantity of: aBookID.
	
	
	self deny: cart isEmpty.
	self assert: 5 equals: cart amountOfBooks.
	self assert: (cart has: aQuantity of: aBookID) .! !

----End fileIn of /home/sfestini/Desktop/ingenieria1/isw1-ejercicios/22 - TerniLapilli/TerniLapilli.st----!
!TusLibrosTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:27:42' prior: 50781277!
test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -5 .
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !

!testRun: #TusLibrosTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 16:27:47'!
FAILURE!
!TusLibros class methodsFor: 'nil' stamp: 'SF 10/31/2019 16:28:40'!
errorInvalidBookID

	^ 'Error - Invalid Book ID!!'.! !

!methodRemoval: TusLibros class #errorInvalidBookID stamp: 'SF 10/31/2019 16:28:54'!
errorInvalidBookID

	^ 'Error - Invalid Book ID!!'.!
!ShoppingCart class methodsFor: 'no messages' stamp: 'SF 10/31/2019 16:28:59'!
errorInvalidBookID

	^ 'Error - Invalid Book ID!!'.! !

!classRemoval: #TusLibros stamp: 'SF 10/31/2019 16:29:04'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!classDefinition: #ShoppingCart category: #'TusLibros-Ejercicio' stamp: 'SF 10/31/2019 16:29:33'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Ejercicio'!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/31/2019 16:29:37'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/31/2019 16:29:38'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/31/2019 16:29:39'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 16:29:40'!
PASSED!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:31:53' prior: 50780733!
add: aQuantity of: aBookID
	
	aBookID <= 0 ifTrue:[self error: self class errorInvalidBookID .].
	
	books at: aBookID put: aQuantity .! !

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 16:32:24'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:33:15'!
test05ShoppingCartFailsWhenTryingToAddLessThan1Book

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:33:16'!
FAILURE!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:33:27'!
test06ShoppingCartFailsWhenTryingToAddLessThan1Book

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:33:27'!
test05ShoppingCartFailsWhenTryingToAddLessThan1Book

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:33:29'!
FAILURE!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:33:29'!
FAILURE!
!ShoppingCart class methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:33:53'!
errorInvalidBookQuantity

	^ 'Error - Invalid Book Quantity!!'.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:34:23' prior: 50782944!
add: aQuantity of: aBookID
	
	aBookID <= 0 ifTrue:[self error: self class errorInvalidBookID .].
	aQuantity <= 0 ifTrue:[self error: self class errorInvalidBookQuantity .].
	
	books at: aBookID put: aQuantity .! !

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:34:26'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:44:37'!
test07ShoppingCartHasRegisteredReturnsFalseIfTheresNothingRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:45:11'!
test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test07ShoppingCartHasRegisteredReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:45:11'!
test07ShoppingCartHasRegisteredReturnsFalseIfTheresNothingRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:46:52' prior: 50783048!
test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID

	| cart |
	
	cart := ShoppingCart new. 
	
	self deny: (cart has: 5 of: 10).
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:47:36' prior: 50780796!
has: aQuantity of: aBookID

	^ (books at: aBookID) = aQuantity .! !

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:47:45'!
ERROR!

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:47:45'!
ERROR!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:48:17' prior: 50783089!
has: aQuantity of: aBookID

	^ (books at: aBookID ifAbsent: [^aQuantity = 0]) = aQuantity .! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:48:24'!
PASSED!

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:48:24'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:49:22'!
test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID

	| cart |
	
	cart := ShoppingCart new. 
	
	self deny: (cart has: 5 of: 10).
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:49:34' prior: 50783135!
test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID

	| cart aBookID aQuantity |
	
	aBookID := -5 .
	aQuantity:= 3.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:51:08' prior: 50783143!
test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 3.
	cart := ShoppingCart new. 
	cart add: aQuantity of: aBookID.
	cart remove: 2 of: aBookID.
	
	self assert: (cart has: 1 of: aBookID)! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:52:25'!
remove: aQuantity of: aBookID

	books at: aBookID put: ((books at: aBookID) - aQuantity ).! !

!testRun: #ShoppingCartTest #test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID stamp: 'SF 10/31/2019 16:52:30'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:54:53'!
test09ShoppingCartCantRemoveAnInvalidAmountOfBooks

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= -1.
	cart := ShoppingCart new. 
	cart add: aQuantity of: aBookID.
	cart remove: 2 of: aBookID.
	
	self assert: (cart has: 1 of: aBookID)! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:55:03' prior: 50783180!
test09ShoppingCartCantRemoveAnInvalidAmountOfBooks

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart add: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:55:19' prior: 50783191!
test09ShoppingCartCantRemoveAnInvalidAmountOfBooks

	| cart aBookID aQuantity |
	
	aBookID := 5 .
	aQuantity:= 0.
	cart := ShoppingCart new. 
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 16:55:37' prior: 50783170!
remove: aQuantity of: aBookID

	aBookID <= 0 ifTrue:[self error: self class errorInvalidBookID .].
	aQuantity <= 0 ifTrue:[self error: self class errorInvalidBookQuantity .].

	books at: aBookID put: ((books at: aBookID) - aQuantity ).! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:56:18'!
test09ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:56:33'!
test10ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test09ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:56:33'!
test09ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:56:37'!
FAILURE!

!testRun: #ShoppingCartTest #test09ShoppingCartCantRemoveAnInvalidAmountOfBooks stamp: 'SF 10/31/2019 16:56:49'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:56:50'!
FAILURE!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:56:50'!
FAILURE!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:57:08' prior: 50783247!
test10ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartCantRemoveAnInvalidAmountOfBooks stamp: 'SF 10/31/2019 16:57:09'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:57:09'!
PASSED!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:57:49'!
test10ShoppingCartCantRemoveBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test10ShoppingCartCantRemoveAnBooksFromAnInvalidID stamp: 'SF 10/31/2019 16:57:49'!
test10ShoppingCartCantRemoveAnBooksFromAnInvalidID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:58:10'!
test10ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:58:17'!
test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	! !

!methodRemoval: ShoppingCartTest #test10ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID stamp: 'SF 10/31/2019 16:58:18'!
test10ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := -2 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookID .
									self assert: cart isEmpty.	
							 ]
	
	!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 16:59:06' prior: 50783397!
test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 1 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	cart add: 1 of: aBookID.
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
									self assert: cart isEmpty.	
							 ]
	
	! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'SF 10/31/2019 17:00:19' prior: 50783222!
remove: aQuantity of: aBookID

	aBookID <= 0 ifTrue:[self error: self class errorInvalidBookID .].
	((aQuantity <= 0) or: [(books at: aBookID) < aQuantity ]) ifTrue:[self error: self class errorInvalidBookQuantity .].

	books at: aBookID put: ((books at: aBookID) - aQuantity ).! !

!testRun: #ShoppingCartTest #test01ShoppingCartStartsEmpty stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test02ShoppingCartIsNotEmptyWhenABookIsAdded stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test03ShoppingCartCanAddManyBooksOfTheSameID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test04ShoppingCartCanAddBooksOfDifferentIDs stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test05ShoppingCartFailsWhenTryingToAddABookWithInvalidID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test06ShoppingCartFailsWhenTryingToAddLessThan1Book stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test07ShoppingCartHasOfReturnsFalseIfTheresNothingRegisteredToThatID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test08ShoppingCartRemoveDiscountsQuantityOfRegisteredBooksToTheID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test09ShoppingCartCantRemoveAnInvalidAmountOfBooks stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test10ShoppingCartCantRemoveBooksFromAnInvalidID stamp: 'SF 10/31/2019 17:00:21'!
PASSED!

!testRun: #ShoppingCartTest #test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID stamp: 'SF 10/31/2019 17:00:21'!
FAILURE!

!testRun: #ShoppingCartTest #test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID stamp: 'SF 10/31/2019 17:00:21'!
FAILURE!
!ShoppingCartTest methodsFor: 'testing' stamp: 'SF 10/31/2019 17:00:37' prior: 50783430!
test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID

	| cart aBookID aQuantity |
	
	aBookID := 1 .
	aQuantity:= 3.
	cart := ShoppingCart new.	
	cart add: 1 of: aBookID.
	
	self 
		should: [ cart remove: aQuantity of: aBookID]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:error | self assert: error messageText = ShoppingCart errorInvalidBookQuantity .
							 ]
	
	! !

!testRun: #ShoppingCartTest #test11ShoppingCartCantRemoveMoreBooksThanThereAreRegisteredToThatID stamp: 'SF 10/31/2019 17:00:39'!
PASSED!

----SNAPSHOT----(31 October 2019 17:00:46) CuisUniversity-3938.image priorSource: 14377705!

----QUIT----(31 October 2019 17:00:56) CuisUniversity-3938.image priorSource: 14459993!
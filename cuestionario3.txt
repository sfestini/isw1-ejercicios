Null Object Pattern

- El cero es considerado el null object de números porque...

... todas las anteriores.


- En un lenguaje de clasificación el nullobject y el realobject tienen que pertenecer obligatoriamente a la misma jerarquía.

Verdadero. Esto debe ser asi, ya que tal cual se plantea en el paper la clave del patrón es tener una clase abstracta que define la interfaz para todos los objetos de este tipo. El null object se implementa como una subclase de esta clase abstracta. Debido a que se ajusta a la interfaz de la clase abstracta, se puede usar en cualquier lugar donde se necesite este tipo de objeto. En caso contrario, esto no seria posible o complejizaria el codigo.


- El patron de diseño sugiere que el objeto null object responda siempre isNil o == null como verdadero para evitar el uso de ifs.

Falso. Ya que esto es exactamente lo que se busca evitar, debido a que lo que se quiere lograr es poder tratar un colaborador que no hace nada (null object) de la misma manera a la que se trata a uno que realmente tiene comportamiento (real object). Evitando de esta manera el tener que estar preguntando si estamos tratando con un null object.


- El null object se puede construir siempre partiendo de una condición IF entre un objeto con responsabilidades y la (posible) ausencia de este y aplicando el algoritmo de extracción de IF.

Verdadero. Debido a que el algoritmo de extraccion de IF propone crear una jerarquia polimorfica con una abstraccion por cada "condicion". En donde el realObject seria aquel que tiene realmente un comportamiento, y la (posible) ausencia de este seria el nullObject. Luego, el algoritmo propone reemplazar los IF por envio de mensajes poliformificos, que es exactamente lo que busca lograr el Null Object Pattern: poder tratar de manera indistinta al objecto que tiene comportamiento y aquel que no.

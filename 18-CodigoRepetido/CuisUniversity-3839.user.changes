

----QUIT----(11 August 2019 20:30:30) CuisUniversity-3839.image priorSource: 9989307!

----STARTUP---- (11 August 2019 20:30:31) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-3839.image!


!classDefinition: #BecomeTestExperiment category: #'BaseImageTests-Kernel'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!classDefinition: #BecomeTestExperiment category: #'BaseImageTests-Kernel'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!
!ArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:30:50'!
array ^ #(nil true false)! !

ArrayLiteralTest removeSelector: #array!
!ArrayLiteralTest methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:30:50'!
array ^ #(#nil #true #false #'nil' #'true' #'false')! !

ArrayLiteralTest removeSelector: #array!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #SuperclassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

Smalltalk removeClassNamed: #SuperclassWithInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:31'!
m1 | a | a := 10.! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:31'!
m1:a! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:32'!
m1 [ :a | ] value: 1! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:32'!
m1 [ | a | ] value! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: #'__Refactoring-TestData__'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:33'!
m1 | a | ! !

Smalltalk removeClassNamed: #SubclassOfClassToRefactor!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:34' prior: 50722580!
sender_m1 self m1: 1! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35' prior: 50722606!
sender_m1 self m1: 1 m2: 2! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
sender_m1 self m1: 1. self m1: 1.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:35' prior: 50722633!
sender_m1 self m1: 1 m2: 2. self m1: 1 m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
sender_m1 self m1: self size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36' prior: 50722661!
sender_m1 self m1: self size m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
sender_m1 self m1: self size + 4.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:36' prior: 50722689!
sender_m1 self m1: self size + 4 m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
sender_m1 self m1: (self at: 1 put: 2).! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:37' prior: 50722717!
sender_m1 self m1: (self at: 1 put: 2) m2: 2.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
sender_m1 #m1 size! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38' prior: 50722745!
sender_m1 #m1: size! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
sender_m1 #m1: size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:38' prior: 50722771!
sender_m1 #m1:m2: size.! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:40'!
m1! !

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:41'!
m1:newParam! !

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
sender_m1 self m1
	! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:43' prior: 50722821!
sender_m1 self m1: 1
	! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:44' prior: 50722846!
sender_m1 self m1: (self at: 1)! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45' prior: 50722872!
sender_m1 self m1: 1 m2: (self at: 1)! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
sender_m1 self m1:[ 1 factorial ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:45' prior: 50722900!
sender_m1 self m1:[ 1 factorial ] m2: 1! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
sender self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m2: newParam m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46' prior: 50722928!
sender self m2: 2 m1: 1! !

ClassToAddParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
sender self m1: 1 m3: 3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:46' prior: 50722954!
sender self m1: 1 m2: 2 m3: 3! !

ClassToAddParameter removeSelector: #m1:m3:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
sender
	self m1: 1 m3: 3.
	self
		m1: 4
		m3: 6! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:47' prior: 50722981!
sender
	self m1: 1 m2: 2 m3: 3.
	self
		m1: 4
		m2: 2 m3: 6! !

ClassToAddParameter removeSelector: #m1:m3:!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
m1

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48'!
m1: newParam

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:48' prior: 50723009!
sender_m1 self m1: 1! !

ClassToAddParameter removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToAddParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddParameter!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:50'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:50'!
m2: p2 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m2: p2 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToChangeSelectorOrder category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m1: p1 m2: p2 m3: p3! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:31:51'!
m2: p2 m3: p3 m1: p1! !

ClassToChangeSelectorOrder removeSelector: #m1:m2:m3:!

Smalltalk removeClassNamed: #ClassToChangeSelectorOrder!

!classDefinition: #ClassToExtractTemp category: #'__Refactoring-TestData__'!
Object subclass: #ClassToExtractTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToExtractTemp!

!classDefinition: #ClassToRefactorSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractTemp category: #'__Refactoring-TestData__'!
ClassToRefactorSuperclass subclass: #ClassToExtractTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToExtractTemp!

Smalltalk removeClassNamed: #ClassToRefactorSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AlreadyExistingClass category: #'__Refactoring-TestData__'!
Object subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AlreadyExistingClass!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: #'__Refactoring-TestData__'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddSuperclass!

Smalltalk removeClassNamed: #AddedSuperclass!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:05'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithReferenceInstVar category: #'__Refactoring-TestData__'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithReferenceInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:06'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithReferenceInstVar!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:07'!
m1 ^a! !

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithInstVar!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:09'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:09'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:10'!
m1: parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:10'!
m1: parameter ^parameter! !

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m2:parameter2! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 m2:parameter2
	| t1 |! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:11'!
m1:parameter1 
	| t1 |! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:12'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:12'!
m0: parameter0 
	m2:parameter2! !

ClassToRemoveParameter removeSelector: #m0:m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1! !

ClassToRemoveParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
sender
		self 
			m1: 1 
			m2: 2 ! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:13' prior: 50723512!
sender
		self 
			m2: 2 ! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
sender
		self 
			m1:
			 (1+2).! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14' prior: 50723540!
sender
		self 
			m1.! !

ClassToRemoveParameter removeSelector: #m1:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #ClassToRemoveParameter category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
sender
		self m1: (1+1) m2: 2.
		self m1: 3 m2: 4.! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:14' prior: 50723567!
sender
		self m2: 2.
		self m2: 4.! !

ClassToRemoveParameter removeSelector: #m1:m2:!

Smalltalk removeClassNamed: #ClassToRemoveParameter!

!classDefinition: #OldClassTest07 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest07!

!classDefinition: #OldClassTest07 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:17'!
m1 OldClassTest07 new! !
!NewClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:17' prior: 50723599!
m1 NewClassTest07 new! !

Smalltalk removeClassNamed: #NewClassTest07!

!classDefinition: #OldClassTest08 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest08
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest08 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18'!
m1 #OldClassTest08 size! !
!NewClassTest8 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18' prior: 50723615!
m1 #NewClassTest8 size! !

Smalltalk removeClassNamed: #NewClassTest8!

!classDefinition: #OldClassTest09 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18'!
m1 OldClassTest09 new. Object new! !
!NewClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:18' prior: 50723631!
m1 NewClassTest09 new. Object new! !

Smalltalk removeClassNamed: #NewClassTest09!

!classDefinition: #OldClassTest10 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:19'!
m1 #OldClassTest10 size. #Object size! !
!NewClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:19' prior: 50723649!
m1 #NewClassTest10 size. #Object size! !

Smalltalk removeClassNamed: #NewClassTest10!

!classDefinition: #OldClassTest11 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:20'!
m1 OldClassTest11 new. #OldClassTest11 size! !
!NewClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:20' prior: 50723667!
m1 NewClassTest11 new. #NewClassTest11 size! !

Smalltalk removeClassNamed: #NewClassTest11!

!classDefinition: #OldClassTest14 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #OldClassTest14!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:21'!
m1 ^OldClassTest15! !

!classDefinition: #OldClassTest15 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest15!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:22'!
m1 ^OldClassTest16! !

!classDefinition: #OldClassTest16 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest16!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:23'!
m1 ^NewClassTest17! !

!classDefinition: #OldClassTest17 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #NewClassTest17!

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #OldClassTest18 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:24'!
m1 ^OldClassTest18! !
!NewClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:25' prior: 50723781!
m1 ^NewClassTest18! !

Smalltalk removeClassNamed: #NewClassTest18!

!classDefinition: #OldClassTest18 category: #'__Refactoring-TestData__'!
Object subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #OldClassTest18!

!classDefinition: #AClassToRefactor category: #'__Refactoring-TestData__'!
Object subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28'!
m1 ^OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28' prior: 50723809!
m1 ^NewNameToRename__! !

Smalltalk removeClassNamed: #AClassToRefactor!

!classDefinition: #AClassToRefactor category: #'__Refactoring-TestData__'!
Object subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28'!
m1 ^#OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:28' prior: 50723825!
m1 ^#NewNameToRename__! !

Smalltalk removeClassNamed: #AClassToRefactor!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:29'!
m1 ^OldNameToRename__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassReferencingClassVarSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:30'!
m1 ^OldNameRenamed__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

Smalltalk removeClassNamed: #ClassReferencingClassVarSuperclass!

!classDefinition: #ClassReferencingClassVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:31'!
m1 ^OldNameToRename__! !

Smalltalk removeClassNamed: #ClassReferencingClassVar!

!classDefinition: #ClassWithoutInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassWithoutInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #SuperclassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

Smalltalk removeClassNamed: #SuperclassWithInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37'!
m1 ^old! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37' prior: 50724007!
m1 ^new! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37'!
m1 old := 10! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:37' prior: 50724039!
m1 new := 10! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:38'!
m1 old := 10. ^old! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:38' prior: 50724079!
m1 new := 10. ^new! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:39'!
m1 keep := old. ^keep! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:39' prior: 50724113!
m1 keep := new. ^keep! !

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'keep new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:40'!
m1 | new | new := 10.! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:40'!
m1:new! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:41'!
m1 [ :new | ] value: 1! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:41'!
m1 [ | new | ] value! !

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: #'__Refactoring-TestData__'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:42'!
m1 | new | ! !

Smalltalk removeClassNamed: #SubclassOfClassToRefactor!

Smalltalk removeClassNamed: #ClassToRenameInstVar!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:43' prior: 50724265!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44' prior: 50724291!
m1__ self oldXyz__. self toKeep! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:44' prior: 50724295!
m1__ self newXyz__. self toKeep! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'oldSelectorCategory' stamp: 'HAW 8/11/2019 20:32:46'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:46' prior: 50724322!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47' prior: 50724344!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:47' prior: 50724356!
newXyz__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724376!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724384!
oldXyz__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724388!
newXyz__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724413!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
m1 #oldXyz__ size! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:48' prior: 50724425!
m1 #newXyz__ size! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49' prior: 50724451!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49' prior: 50724459!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:49'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724511!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724519!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724535!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724543!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724559!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:50' prior: 50724567!
m1__ self newXyz__! !

SuperclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__-toAvoid'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724688!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724696!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724664!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:51' prior: 50724672!
m1__ self newXyz__! !

AnotherclassToRenameSelector removeSelector: #oldXyz__!

AnotherclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #AnotherclassToRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__-Another'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #AnotheclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #OtherCatClassToRenameSelector category: #'__Refactoring-TestData__-Another'!
Object subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: #'__Refactoring-TestData__-toAvoid'!
Object subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724827!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724876!
m1__ self newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724843!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724803!
m1__ self newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724771!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724868!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724795!
m1__ self newXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724851!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724819!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:52' prior: 50724779!
m1__ self newXyz__! !

AnotheclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

SuperclassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

OtherCatClassToRenameSelector class removeSelector: #oldXyz__!

OtherCatClassToRenameSelector removeSelector: #oldXyz__!

AnotheclassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToAvoidRenameSelector!

Smalltalk removeClassNamed: #AnotheclassToRenameSelector!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

Smalltalk removeClassNamed: #OtherCatClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725020!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725028!
m1__ self newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725044!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:54' prior: 50725052!
m1__ self newXyz__! !

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

AnotherclassToRenameSelector removeSelector: #oldXyz__!

AnotherclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #AnotherclassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725109!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1 ^#(#oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725121!
m1 ^#(#newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725143!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
m1 ^#(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:56' prior: 50725155!
m1 ^#(#newXyz__ #newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57' prior: 50725178!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
m1 ^#(#oldXyz__ #oldXyz__), #(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:57' prior: 50725190!
m1 ^#(#newXyz__ #newXyz__), #(#newXyz__ #newXyz__)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725214!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1 ^#(#oldXyz__ #oldXyz__1)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725226!
m1 ^#(#newXyz__ #oldXyz__1)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725249!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
m1 ^#(#oldXyz__ #oldXyz__:)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:58' prior: 50725261!
m1 ^#(#newXyz__ #oldXyz__:)! !

ClassToRenameSelector removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
m1 ^self && 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59' prior: 50725288!
m1 ^self abc: 1! !

ClassToRenameSelector removeSelector: #&&!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
m1 ^self abc: 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:32:59' prior: 50725314!
m1 ^self && 1! !

ClassToRenameSelector removeSelector: #abc:!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:00'!
&& aParameter! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:00'!
abc: p1 def: p2! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #SuperclassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: #'__Refactoring-TestData__'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725366!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725374!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725390!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725398!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725414!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:01' prior: 50725422!
m1__ self newXyz__! !

SuperclassToRenameSelector removeSelector: #oldXyz__!

SuperclassToRenameSelector class removeSelector: #oldXyz__!

ClassToRenameSelector removeSelector: #oldXyz__!

ClassToRenameSelector class removeSelector: #oldXyz__!

SubclassToRenameSelector removeSelector: #oldXyz__!

SubclassToRenameSelector class removeSelector: #oldXyz__!

Smalltalk removeClassNamed: #SubclassToRenameSelector!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #SuperclassToRenameSelector!

!classDefinition: #ClassToRenameTemp category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameTemp!

!classDefinition: #ClassToRefactorSuperclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameTemp category: #'__Refactoring-TestData__'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRenameTemp!

Smalltalk removeClassNamed: #ClassToRefactorSuperclass!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:07'!
m1 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemove!

Smalltalk removeClassNamed: #ClassReferencingClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:08'!
m1 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemoveSubclass category: #'__Refactoring-TestData__'!
Object subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:10'!
m1 ^ClassToRemoveSubclass! !

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

Smalltalk removeClassNamed: #ClassReferencingClassToRemoveSubclass!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToRemove category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: #'__Refactoring-TestData__'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:12'!
m1 ^ClassToRemoveSubclass! !
!ClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:12'!
m2 ^ClassToRemove! !

Smalltalk removeClassNamed: #ClassToRemoveSubclass!

Smalltalk removeClassNamed: #ClassToRemove!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13' prior: 50725671!
m1 ! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13'!
m1| a |a := 2.
	^a! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:13' prior: 50725695!
m1 a := 2.
	^a! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m1! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:14'!
m2| a |! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: #'__Refactoring-TestData__'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:15'!
m1| a |! !

Smalltalk removeClassNamed: #SubclassToRefactor!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: #'__Refactoring-TestData__'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m1| a |! !
!SubclassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m2| a |! !

Smalltalk removeClassNamed: #SubclassToRefactor!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:16' prior: 50725795!
m1 ! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:17'!
m1| a b |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:17' prior: 50725819!
m1|  b |! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18'!
m1
	[ | a | ].
	[ | a | ].! !

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18'!
m1
	[ | a | ].! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:18' prior: 50725856!
m1
	[   ].! !

!classDefinition: #ClassToChangeVariable category: #'__Refactoring-TestData__'!
Object subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToChangeVariable!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:19' prior: 50725883!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:20' prior: 50725946!
m3 | x | x := ClassOfSender new. x m2! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassOfSender!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:21' prior: 50725984!
m3 | x | x := self. x := ClassOfSender new. x m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:22' prior: 50726027!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:23' prior: 50726070!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

ClassToRenameSelector removeSelector: #m1!

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24' prior: 50726103!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:24' prior: 50726137!
m3 | x | x := self. x := ClassOfSender new. x m2! !

ClassOfSender removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:25' prior: 50726175!
m3 self m2. ClassOfSender new m1! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26' prior: 50726202!
m3 |x| self m2. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26' prior: 50726210!
m3 |x| self m2. x m1! !

ClassToRenameSelector removeSelector: #m1!

Smalltalk removeClassNamed: #ClassToRenameSelector!

!classDefinition: #ClassToRenameSelector category: #'__Refactoring-TestData__'!
Object subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: #'__Refactoring-TestData__'!
Object subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 8/11/2019 20:33:26'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

Smalltalk removeClassNamed: #ClassToRenameSelector!

Smalltalk removeClassNamed: #ClassOfSender!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

!classDefinition: #LiveTypingClassToBeRemoved category: #'__LiveTyping-TestData__'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

Smalltalk removeClassNamed: #LiveTypingClassToBeRemoved!

----QUIT----(11 August 2019 20:33:45) CuisUniversity-3839.image priorSource: 12503879!

----STARTUP---- (12 August 2019 20:19:26) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


ObjectBuilder create: #saludador asChildOf: DenotativeObject collaboratorNames: '' in: 'DenotativeObject-TestSupport'!

!classDefinition: #saludador category: #'DenotativeObject-TestSupport'!
DenotativeObject subclass: #saludador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-TestSupport'!

!classDefinition: 'saludador class' category: #'DenotativeObject-TestSupport'!
saludador class
	instanceVariableNames: ''!

Smalltalk removeClassNamed: #saludador!

ObjectBuilder create: #saludador asChildOf: DenotativeObject collaboratorNames: '' in: 'DenotativeObject-Morph'!

!classDefinition: #saludador category: #'DenotativeObject-Morph'!
DenotativeObject subclass: #saludador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'DenotativeObject-Morph'!

!classDefinition: 'saludador class' category: #'DenotativeObject-Morph'!
saludador class
	instanceVariableNames: ''!

Smalltalk removeClassNamed: #saludador!

ObjectBuilder create: #Saludador
	collaboratorNames: ''
	in: 'Segunda Actividad'
	!

!classDefinition: #Saludador category: #'Segunda Actividad'!
DenotativeObject subclass: #Saludador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Segunda Actividad'!

!classDefinition: 'Saludador class' category: #'Segunda Actividad'!
Saludador class
	instanceVariableNames: ''!

Saludador Hola!
!Saludador class methodsFor: 'nil' stamp: 'Santiago Festini 8/12/2019 20:45:03'!
hola

	^'chau'! !

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola!

Saludador hola !

ObjectBuilder create: #Bill
	collaboratorNames: ''
	in: 'Tercera Actividad'
	!

!classDefinition: #Bill category: #'Tercera Actividad'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'Bill class' category: #'Tercera Actividad'!
Bill class
	instanceVariableNames: ''!

Bill
	collaboratorNames: ''
	in: 'Tercera Actidad'!

!classDefinition: #Bill category: #'Tercera Actidad'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actidad'!

!classDefinition: 'Bill class' category: #'Tercera Actidad'!
Bill class
	instanceVariableNames: ''!

Bill
	collaboratorNames: ''
	in: 'Tercera Actividad'!

!classDefinition: #Bill category: #'Tercera Actividad'!
DenotativeObject subclass: #Bill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'Bill class' category: #'Tercera Actividad'!
Bill class
	instanceVariableNames: ''!

!classDefinition: 'Bill class' category: #'Tercera Actividad'!
Bill class
	instanceVariableNames: 'energia'!
!Bill class methodsFor: 'nil' stamp: 'Santiago Festini 8/12/2019 21:06:40'!
energia

	^energia! !
!Bill class methodsFor: 'nil' stamp: 'Santiago Festini 8/12/2019 21:14:09'!
comer ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/12/2019 21:20:01'!
caminar: unaCantidadDeKilometros

	energia = energia - 3 - unaCantidadDeKilometros ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/12/2019 21:20:08' prior: 50726417!
caminar: unaCantidadDeKilometros

	energia := energia - 3 - unaCantidadDeKilometros ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/12/2019 21:21:18'!
comer: unaCantidadDeKilosDeCerebro

	energia := energia + unaCantidadDeKilosDeCerebro * 4! !

Bill class removeSelector: #comer!

Bill energia!

Bill energia!

Bill energia !

Bill energia!

Bill comer: 1!

Bill comer: 1!

Bill comer: 1!

Bill comer:1!

Bill comer:1!

Bill energia!

 30036 !

Bill energia !

Bill energia !

Bill comer: 1!

Bill energia!

Bill energia!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/12/2019 21:26:08' prior: 50726430!
comer: unaCantidadDeKilosDeCerebro

	energia := energia + (unaCantidadDeKilosDeCerebro * 4)! !

Bill energia !

Bill comer: 1!

Bill comer: 1!

Bill energia !

Bill energia !

Transcript open!

Transcript open!

Transcript show!

Transcript display!

Transcript display!

Transcript openInHand!

Bill energia!

----SNAPSHOT----(12 August 2019 21:43:35) CuisUniversity-3839.image priorSource: 12628964!

----QUIT----(12 August 2019 21:43:51) CuisUniversity-3839.image priorSource: 12633813!

----STARTUP---- (12 August 2019 21:43:59) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


----QUIT----(12 August 2019 21:44:13) CuisUniversity-3839.image priorSource: 12633905!

----STARTUP---- (15 August 2019 18:24:15) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


1!

-1!

3.14!

3.!

3.!

3. 14!

3!

true!

false!

nil!

meter!

'hola'!

$h!

March !

String.!

Refactoring.!

AlanTuring.!

AlanTuring!

AlanTuring. 3.!

AlanTuring. 3.!

AlanTuring. 3.!

AlanTuring. 3.!

AlanTuring. 3.!

AlanTuring. 3.!

AlanTuring !

10 factorial!

100 factorial!

99 factorial!

100 factorial / 99 factorial!

Bill caminar: 1!

Bill caminar: 1!

Bill caminar: 1!

Bill caminar: 1!

true not!

false not!

true & true.!

10*meter!

(10*meter)+(20*meter)!

(10*meter)+(200*centimeter)!

March/21.!

March/21/2019.!

January/1/2019 distanceTo: March/21/2019.!

March/21/2019 at: 18:30.!

ObjectBuilder create: #Pepe
	collaboratorNames: ''
	in: 'Ejemplo'
	!

!classDefinition: #Pepe category: #Ejemplo!
DenotativeObject subclass: #Pepe
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejemplo'!

!classDefinition: 'Pepe class' category: #Ejemplo!
Pepe class
	instanceVariableNames: ''!
!Pepe class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 18:58:31'!
hola
	
	! !
!Pepe class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/15/2019 18:59:28' prior: 50726503!
hola
	
	^'chaucha'! !

Pepe hola!

ObjectBuilder create: #anObject
	collaboratorNames: ''
	in: 'Ejercicio2'
	!

!classDefinition: #anObject category: #Ejercicio2!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio2'!

!classDefinition: 'anObject class' category: #Ejercicio2!
anObject class
	instanceVariableNames: ''!
!anObject class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 19:52:55'!
turnOn! !
!anObject class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 19:55:25'!
turnOff
! !
!anObject class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 19:55:36'!
speedUp! !
!anObject class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 19:55:42'!
break! !
!anObject class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 19:58:09'!
openTrunk! !

caca!
!Car class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 20:03:41'!
asHtml! !
!Car class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 20:03:51'!
save! !
!Car class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 20:04:02'!
asJson! !

ObjectBuilder create: #AlanTuringg
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #AlanTuringg category: #Ejercicio3!
DenotativeObject subclass: #AlanTuringg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlanTuringg class' category: #Ejercicio3!
AlanTuringg class
	instanceVariableNames: ''!

AlanTuringg dateOfBirth!

AlanTuringg printString!

hola printString!

hola printString!

hola printString!

hola printString!

hola printString!

hola printString!

hola printString!

hola printString!

hola printString!

Saludador printString!

AlanTuringg dateOfBirth!
!AlanTuringg class methodsFor: 'personal info' stamp: 'Santiago Festini 8/15/2019 20:50:18'!
dateOfBirth
	self shouldBeImplemented.! !
!AlanTuringg class methodsFor: 'personal info' stamp: 'Santiago Festini 8/15/2019 20:51:10' prior: 50726567!
dateOfBirth
	^June/23/1912! !

AlanTuringg dateOfBirth !

ObjectBuilder create: #AlonsoChurch
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #AlonsoChurch category: #Ejercicio3!
DenotativeObject subclass: #AlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlonsoChurch class' category: #Ejercicio3!
AlonsoChurch class
	instanceVariableNames: ''!
!AlonsoChurch class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 20:57:04'!
dateOfBirth
	^June/14/1903! !

AlonsoChurch dateOfBirth inspect!

ObjectBuilder create: #AlanKay
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #AlanKay category: #Ejercicio3!
DenotativeObject subclass: #AlanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlanKay class' category: #Ejercicio3!
AlanKay class
	instanceVariableNames: ''!
!AlanKay class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 21:01:34'!
dateOfBirth
	^June/20/1900! !

ObjectBuilder create: #DanIngalls
	collaboratorNames: ''
	in: 'Ejercicio3'
	!

!classDefinition: #DanIngalls category: #Ejercicio3!
DenotativeObject subclass: #DanIngalls
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'DanIngalls class' category: #Ejercicio3!
DanIngalls class
	instanceVariableNames: ''!
!DanIngalls class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 21:02:12'!
dateOfBirth
	^June/10/1999! !
!AlonsoChurch class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 21:04:19'!
ageDifferenceWithAlanTuring
	^AlonsoChurch dateOfBirth distanceTo: AlanTuringg dateOfBirth! !

AlonsoChurch ageDifferenceWithAlanTuring !
!AlonsoChurch class methodsFor: 'nil' stamp: 'Santiago Festini 8/15/2019 21:05:29'!
ageDifferenceWithAlanKay
! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/15/2019 21:05:50' prior: 50726632!
ageDifferenceWithAlanKay
	^AlonsoChurch dateOfBirth distanceTo: AlanKay dateOfBirth! !

----SNAPSHOT----(15 August 2019 21:46:03) CuisUniversity-3839.image priorSource: 12634110!

----QUIT----(15 August 2019 21:46:05) CuisUniversity-3839.image priorSource: 12639734!

----STARTUP---- (21 August 2019 17:40:55) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


'hola' size!

100 factorial!

'hola' size even!

10 + 20!

true & false!

'Hola' at: 1!

'Hola' size + 'Chau' size!

'hola gente!!' copyFrom: 'hola' size + 1 to: 11.!

6+2*5.!

(6+2)*5.!

AlanTuring hola.!

AlanTuring hola.!

AlanTuringg
	collaboratorNames: ''
	in: 'Ejercicio5'!

!classDefinition: #AlanTuringg category: #Ejercicio5!
DenotativeObject subclass: #AlanTuringg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio5'!

!classDefinition: 'AlanTuringg class' category: #Ejercicio5!
AlanTuringg class
	instanceVariableNames: ''!

AlanTuringg
	collaboratorNames: ''
	in: 'Ejercicio3'!

!classDefinition: #AlanTuringg category: #Ejercicio3!
DenotativeObject subclass: #AlanTuringg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlanTuringg class' category: #Ejercicio3!
AlanTuringg class
	instanceVariableNames: ''!

ObjectBuilder create: #anObject
	collaboratorNames: ''
	in: 'Ejercicio5'
	!

!classDefinition: #anObject category: #Ejercicio5!
DenotativeObject subclass: #anObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio5'!

!classDefinition: 'anObject class' category: #Ejercicio5!
anObject class
	instanceVariableNames: ''!

Smalltalk removeClassNamed: #anObject!

ObjectBuilder create: #AlanTuring5
	collaboratorNames: ''
	in: 'Ejercicio5'
	!

!classDefinition: #AlanTuring5 category: #Ejercicio5!
DenotativeObject subclass: #AlanTuring5
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio5'!

!classDefinition: 'AlanTuring5 class' category: #Ejercicio5!
AlanTuring5 class
	instanceVariableNames: ''!
!AlanTuring5 class methodsFor: 'nil' stamp: 'Santiago Festini 8/21/2019 18:01:56'!
doesNotUnderstand: aMessage
	^'No entiendo lo que me decis'! !

AlanTuring5 hola!

AlanTuring5 chau!

AlanTuring hola!

AlanTuring5 hola!

AlanTuring5 chau!

AlanTuring5 nose!

Pepe class removeSelector: #hola!

Saludador class removeSelector: #hola!

AlanTuring5 hola!

AlanTuring5 hola!
!AlanTuring5 class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/21/2019 18:10:56' prior: 50726706!
doesNotUnderstand: aMessage
	^'No entiendo lo que me decis' + aMessage! !
!AlanTuring5 class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/21/2019 18:11:26' prior: 50726719!
doesNotUnderstand: aMessage
	^'No entiendo lo que me decis' + aMessage! !

AlanTuring5 hola!
!AlanTuring5 class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/21/2019 18:12:59' prior: 50726725!
doesNotUnderstand: aMessage
	^'No entiendo lo que me decis' , aMessage string! !

AlanTuring5 hola!
!AlanTuring5 class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/21/2019 18:13:22' prior: 50726732!
doesNotUnderstand: aMessage
	^'No entiendo lo que me decis' , aMessage printstring! !
!AlanTuring5 class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/21/2019 18:13:29' prior: 50726739!
doesNotUnderstand: aMessage
	^'No entiendo lo que me decis' , aMessage printString! !

AlanTuring5 hola!
!AlanTuring5 class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/21/2019 18:13:41' prior: 50726746!
doesNotUnderstand: aMessage
	^'No entiendo lo que me decis ' , aMessage printString! !

AlanTuring5 hola!
!AlonsoChurch class methodsFor: 'nil' stamp: 'Santiago Festini 8/21/2019 18:17:39'!
ageDifferenceWith: aPerson
	^ AlonsoChurch dateOfBirth ! !
!AlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/21/2019 18:18:35' prior: 50726759!
ageDifferenceWith: aPerson
	^ AlonsoChurch dateOfBirth  distanceTo: aPerson dateOfBirth! !

dateOfBirth asMessage sendTo: AlanTuringg!

#dateOfBirth asMessage sendTo: AlanTuringg!

(#ageDifferenceWith: asMessageWith: AlanTuringg) sendTo: AlonsoChurch !

(#ageDifferenceWith: asMessageWith: AlanTuring) sendTo: AlonsoChurch !

(#ageDifferenceWith: asMessageWith: AlanTuringg) sendTo: AlonsoChurch !

AlonsoChurch ageDifferenceWithAlanTuring !

AlonsoChurch ageDifferenceWith: AlanTuringg!

#dateOfBirth asMessage!

#ageDifferenceWith: asMessageWith: AlanTuring!

#dateOfBirth!

self sendTo: AlanTuringg!

AlanTuringg methodNamed: #dateOfBirth.!

AlonsoChurch methodNamed: #dateOfBirth.!

AlonsoChurch methodNamed: #dateOfBirth.!

AlanTuring methodNamed: #dateOfBirth.!

AlanTuring methodNamed: #dateOfBirth.!

AlanTuring methodNamed: #dateOfBirth.!

AlanTuring methodNamed: #dateOfBirth.!

AlanTuringg methodNamed: #dateOfBirth.!

AlanTuringg methodNamed: #dateOfBirth.!

AlanTuringg methodNamed: #dateOfBirth.!

AlanTuringg methodNamed: #dateOfBirth.!

self sourceCode!

self linesOfCode.!

self valueWithReceiver: AlanTuring arguments: #()..!

self valueWithReceiver: AlanTuringg arguments: #().!

self valueWithReceiver: AlonsoChurch arguments: #().!

----SNAPSHOT----(21 August 2019 18:47:52) CuisUniversity-3839.image priorSource: 12639826!

----QUIT----(21 August 2019 18:47:54) CuisUniversity-3839.image priorSource: 12644996!

----STARTUP---- (22 August 2019 18:02:11) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


energia!

energia!

28!

28!

28!

28!

28!

28!

28!

	^energia!

Bill energia!

!classDefinition: 'Bill class' category: #'Tercera Actividad'!
Bill class
	instanceVariableNames: 'energia energy'!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/22/2019 18:05:14' prior: 50726409!
energia

	^energy! !

Bill!

Bill!

----STARTUP---- (22 August 2019 20:13:47) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


AlanKay
	collaboratorNames: 'currentCompany'
	in: 'Ejercicio3'!

!classDefinition: #AlanKay category: #Ejercicio3!
DenotativeObject subclass: #AlanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlanKay class' category: #Ejercicio3!
AlanKay class
	instanceVariableNames: 'currentCompany'!

AlanKay collaboratorNamed: 'currentCompany'.!

AlanKay collaboratorNamed: 'currentCompany'.!

AlanKay!

AlanKay collaboratorNamed: 'currentCompany'.!

self value.!

self value: 'VPRI'.!

self value.!

AlanKay!

AlanKay collaboratorNamed: 'currentCompany'.!

AlanKay
	collaboratorNames: 'currentCompany'			
	in: 'Ejercicio3'!

!classDefinition: #AlanKay category: #Ejercicio3!
DenotativeObject subclass: #AlanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: 'AlanKay class' category: #Ejercicio3!
AlanKay class
	instanceVariableNames: 'currentCompany'!
!AlonsoChurch class methodsFor: 'nil' stamp: 'Santiago Festini 8/22/2019 20:28:16'!
isBiggerThan: aPerson
    ^(self ageDifferenceWith: aPerson) positive! !
!AlonsoChurch class methodsFor: 'nil' stamp: 'Santiago Festini 8/22/2019 20:34:24'!
m1: collaborator1
   | temp1 |

   ^thisContext! !

self tempsAndValues. !

self tempAt:1.!

self tempAt:2.!

self tempAt: 2 put:20.!

self tempAt: 2.!

AlanKay collaboratorNamed: 'currentCompany'.!

----SNAPSHOT----(22 August 2019 20:55:18) CuisUniversity-3839.image priorSource: 12645088!

----QUIT----(22 August 2019 21:44:39) CuisUniversity-3839.image priorSource: 12646726!

----STARTUP---- (26 August 2019 14:48:49) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


list assert!

list Assert!

list !

list size!

self setSelectionIndex: 1!

self setSelectionIndex: 1!

self setSelectionIndex: 1!

self setSelectionIndex: 1!

self setSelectionIndex: 1!

self setSelectionIndex: 1!

self setSelectionIndex: 1!

self setSelectionIndex: 1!

self setSelectionIndex: 3!

self selection: #fail!

self setSelectionIndex: 25!

self setSelectionIndex: 30!

self setSelectionIndex: AlanTuringg!

DenotativeObjectBrowser open!

DenotativeObjectBrowser new!

DenotativeObjectBrowser new!

DenotativeObjectBrowser new!

DenotativeObjectBrowser new!

DenotativeObjectBrowser new!

DenotativeObjectBrowser new!

DenotativeObjectBrowser new!

DenotativeObjectBrowser!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send!

self send restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self restart!

self send!

self send!

self send!

self send!

self restart!

self restart!

10 factorial.!

[ 10 factorial ].!

[ 10 factorial ] value.!

[ :anInteger | anInteger factorial ] value: 10.!

[ :anInteger | anInteger factorial ] value: 100.!

factorialBlock := [ :anInteger | anInteger factorial ].!

factorialBlock value: 10.!

factorialSumBlock := [ :anIntegerToFact1 :anIntegerToFact2 | anIntegerToFact1 factorial + anIntegerToFact2 factorial ]. !

factorialSumBlock value: 10 value: 20. !

factorialSumBlock value.!

factorialSumBlock valueWithArguments: #(10 20) .!

factorialSumBlock valueWithArguments: #(10 20) .!

plusTenByTwentyBlock value: 5.!

plusTenByTwentyBlock := [ :anAdder | | anAdderPlusTen | anAdderPlusTen := anAdder + 10. anAdderPlusTen * 20 ].!

plusTenByTwentyBlock value: 5. !

plusTenByTwentyBlock value: 100.!

sum := 0.!

5 timesRepeat: [ sum := sum + 10 ].!

sum.!

sum := 0.!

[ sum < 50 ] whileTrue: [ sum := sum + 10 ].!

sum.!

10 > 5 ifTrue: [ 'Yes!! 10 is greater that five' ] ifFalse: [ 'Nop, it is not' ]. !

sum := 0.!

#(1 2 3 4 5) do: [ :anInteger | sum := sum + anInteger ].!

sum!

#(1 2 3 4 5) inject: 0 into: [ :acum :anInteger | acum + anInteger ].!

#(1 2 3 4 5) inject: 1 into: [ :acum :anInteger | acum + anInteger ]. !

#(1 2 3 4 5) inject: 10 into: [ :acum :anInteger | acum + anInteger ]. !

DenotativeObject subclass: #CloneOfAlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

!classDefinition: #CloneOfAlonsoChurch category: #Ejercicio3!
DenotativeObject subclass: #CloneOfAlonsoChurch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio3'!

CloneOfAlonsoChurch class
	instanceVariableNames: ''!

!classDefinition: 'CloneOfAlonsoChurch class' category: #Ejercicio3!
CloneOfAlonsoChurch class
	instanceVariableNames: ''!
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 15:46:33'!
ageDifferenceWith: aPerson
	^ AlonsoChurch dateOfBirth  distanceTo: aPerson dateOfBirth! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 15:46:33'!
ageDifferenceWithAlanKay
	^AlonsoChurch dateOfBirth distanceTo: AlanKay dateOfBirth! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 15:46:33'!
ageDifferenceWithAlanTuring
	^AlonsoChurch dateOfBirth distanceTo: AlanTuringg dateOfBirth! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 15:46:33'!
dateOfBirth
	^June/14/1903! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 15:46:33'!
isBiggerThan: aPerson
    ^(self ageDifferenceWith: aPerson) positive! !
!CloneOfAlonsoChurch class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 15:46:33'!
m1: collaborator1
   | temp1 |

   ^thisContext! !

clear!

(June/23/2019) = (June/23/2019). !

(June/23/2019) == (June/23/2019). !

100 factorial = 100 factorial. !

100 factorial == 100 factorial. !

10 factorial == 100 factorial.  false !

10 factorial == 100 factorial.  false  false !

10 factorial == 100 factorial.!

('ho','la') = ('ho','la').  !

('ho','la') == ('ho', 'la'). !

('ho','la') == ('ho','la'). !

(AlonsoChurch) == (CloneOfAlonsoChurch )!

(AlonsoChurch) == (AlonsoChurch ) !

----SNAPSHOT----(26 August 2019 15:54:14) CuisUniversity-3839.image priorSource: 12646818!

----QUIT----(26 August 2019 15:54:23) CuisUniversity-3839.image priorSource: 12651760!

----STARTUP---- (26 August 2019 15:56:08) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


1 == 1!

0+1 == 1!

(0+1) == (1) !

100 factorial == 100 factorial. !

(100 factorial) == (100 factorial). !

0+1 == 1  !

1+0 == 1 .!

1+0 == 5-4 . !

1+0 == (5-4).!

(5 factorial) == (5 factorial).  !

(100 factorial) == (100 factorial). !

(10 factorial) == (10 factorial). !

(99 factorial) == (99 factorial).  !

   false!

50!

(25 factorial) == (25 factorial). !

(12 factorial) == (12 factorial).!

(17 factorial) == (17 factorial). !

(21 factorial) == (21 factorial).  !

(19 factorial) == (19 factorial).  !

(20 factorial) == (20 factorial). !

19 factorial!

max integer !

----QUIT----(26 August 2019 16:06:33) CuisUniversity-3839.image priorSource: 12651852!

----STARTUP---- (26 August 2019 17:26:10) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!

!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 17:35:50' prior: 50726424!
caminar: unaCantidadDeKilometros

	(energia - 3 - unaCantidadDeKilometros) <= 0 ifTrue: [^'error'] ifFalse: [energia := energia - 3 - unaCantidadDeKilometros]
	 ! !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 17:36:30' prior: 50727053!
caminar: unaCantidadDeKilometros

	(energia - 3 - unaCantidadDeKilometros) <= 0 ifTrue: [^'No puedo caminar esa distancia, me quedo sin energia...'] ifFalse: [energia := energia - 3 - unaCantidadDeKilometros]
	 ! !

Bill caminar: 100000!

Bill caminar: 100000!

Bill energia!

Bill caminar: 1!

Bill energia !
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 17:41:38' prior: 50727062!
caminar: unaCantidadDeKilometros

	(energia - 3 - unaCantidadDeKilometros) <= 0 ifTrue: [^5/0] ifFalse: [energia := energia - 3 - unaCantidadDeKilometros]
	 ! !

Bill caminar: 10000!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 17:42:16' prior: 50727076!
caminar: unaCantidadDeKilometros

	(energia - 3 - unaCantidadDeKilometros) <= 0 ifTrue: [self Error] ifFalse: [energia := energia - 3 - unaCantidadDeKilometros]
	 ! !

Bill caminar: 10000!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 17:43:27' prior: 50727086!
caminar: unaCantidadDeKilometros

	(energia - 3 - unaCantidadDeKilometros) <= 0 ifTrue: [self Error] ifFalse: [energia := energia - 3 - unaCantidadDeKilometros]
	 ! !

----SNAPSHOT----(26 August 2019 17:43:31) CuisUniversity-3839.image priorSource: 12652644!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:00:58' prior: 50727096!
caminar: unaCantidadDeKilometros

	(energia - 3 - unaCantidadDeKilometros) <= 0 ifTrue: [self Error] ifFalse: [energia := energia - 3 - unaCantidadDeKilometros]
	 ! !

----SNAPSHOT----(26 August 2019 18:01:01) CuisUniversity-3839.image priorSource: 12654502!
!Bill class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:01:12' prior: 50727108!
caminar: unaCantidadDeKilometros

	(energia - 3 - unaCantidadDeKilometros) <= 0 ifTrue: [self removeFromSystem] ifFalse: [energia := energia - 3 - unaCantidadDeKilometros]
	 ! !

Bill caminar: 10000!

Smalltalk removeClassNamed: #Bill!

----STARTUP---- (26 August 2019 18:02:24) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


Bill comer: 1000!

Bill energia !

Bill caminar: 13!

Bill energia!

ObjectBuilder create: #Peano
	collaboratorNames: ''
	in: 'Axiomas Peano'
	!

!classDefinition: #Peano category: #'Axiomas Peano'!
DenotativeObject subclass: #Peano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: 'Peano class' category: #'Axiomas Peano'!
Peano class
	instanceVariableNames: ''!

Peano
	collaboratorNames: 'uno'
	in: 'Axiomas Peano'!

!classDefinition: #Peano category: #'Axiomas Peano'!
DenotativeObject subclass: #Peano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: 'Peano class' category: #'Axiomas Peano'!
Peano class
	instanceVariableNames: 'uno'!
!Peano class methodsFor: 'no messages' stamp: 'Santiago Festini 8/26/2019 18:22:25'!
next: anInteger
	! !

ObjectBuilder create: #I
	collaboratorNames: ''
	in: 'Axiomas Peano'
	!

!classDefinition: #I category: #'Axiomas Peano'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: 'I class' category: #'Axiomas Peano'!
I class
	instanceVariableNames: ''!

ObjectBuilder create: #II
	collaboratorNames: ''
	in: 'Axiomas Peano'
	!

!classDefinition: #II category: #'Axiomas Peano'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: 'II class' category: #'Axiomas Peano'!
II class
	instanceVariableNames: ''!
!I class methodsFor: 'no messages' stamp: 'Santiago Festini 8/26/2019 18:30:02'!
next 

	^II! !
!II class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 18:31:04'!
next

	^self cloneNamed: self name, 'I'! !

!classDefinition: 'II class' category: #'Axiomas Peano'!
II class
	instanceVariableNames: 'next'!
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:32:26' prior: 50727176!
next

	next ifNil: [next := self cloneNamed: self name, 'I']! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:32:51' prior: 50727184!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:34:02'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !

II next !

III next !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:34:23'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !
!II class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 18:39:17'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

Smalltalk removeClassNamed: #III!

Smalltalk removeClassNamed: #IIII!

II next  III .!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:39:44'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:39:44'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

Smalltalk removeClassNamed: #III!

II removeAllNext !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:41:10'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:41:10'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

III next !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:41:22'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:41:22'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

II removeAllNext !

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II next.!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:41:51'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:41:51'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

 III !

 III !

 III !

II next.!

III next!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:42:08'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:42:08'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

IIII next .!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIII class
	instanceVariableNames: 'next'!

!classDefinition: 'IIIII class' category: #'Axiomas Peano'!
IIIII class
	instanceVariableNames: 'next'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:42:18'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'].
	
	^next! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:42:18'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

II removeAllNext !

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!I class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 18:51:02'!
+ unNumeroDePeano

	^unNumeroDePeano next! !

I + I !

I + I + II !

!classDefinition: 'II class' category: #'Axiomas Peano'!
II class
	instanceVariableNames: 'next previous'!
!II class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 18:55:17'!
previous

	^previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:56:46' prior: 50727190!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
				next previous: self].
	
	^next! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 18:56:54' prior: 50727433!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self].
	
	^next! !
!II class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 19:02:13'!
+ unNumero

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:03:45' prior: 50727440!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!II class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 19:04:38'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:04:51' prior: 50727446!
+ unNumeroDePeano

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:09:04' prior: 50727462!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !

I + II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:25'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:25'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:25'!
previous

	^previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:25'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:25'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

III + II!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
previous

	^previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: #'Axiomas Peano'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
previous

	^previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:11:45'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

----SNAPSHOT----(26 August 2019 19:12:00) CuisUniversity-3839.image priorSource: 12654886!

I + II!

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

 III !

IIIII + IIIII + IIIII!

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: #'Axiomas Peano'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous

	^previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: #'Axiomas Peano'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous

	^previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: #'Axiomas Peano'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous

	^previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous

	^previous! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous

	^previous! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous

	^previous! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:50'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:51'!
previous

	^previous! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
previous

	^previous! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
previous

	^previous! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
previous

	^previous! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 19:12:52'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

II removeAllNext !

Smalltalk removeClassNamed: #IIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!II class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 20:43:20'!
- unNumeroDePeano

	(unNumeroDePeano = I) ifTrue:[^unNumeroDePeano previous]
							    ifFalse:[^self previous - unNumeroDePeano previous]! !

II - I!

II + II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
- unNumeroDePeano

	(unNumeroDePeano = I) ifTrue:[^unNumeroDePeano previous]
							    ifFalse:[^self previous - unNumeroDePeano previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
previous

	^previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
- unNumeroDePeano

	(unNumeroDePeano = I) ifTrue:[^unNumeroDePeano previous]
							    ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
previous

	^previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:44:28'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

III - II!

II removeAllNext !

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:45:56' prior: 50728082!
- unNumeroDePeano

	(unNumeroDePeano = I) ifTrue:[^unNumeroDePeano previous]
							    ifFalse:[^(self previous) - (unNumeroDePeano previous)]! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:46:24' prior: 50728195!
- unNumeroDePeano

	(unNumeroDePeano = I) ifTrue:[^self previous]
							    ifFalse:[^(self previous) - (unNumeroDePeano previous)]! !

II - I!
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:46:47' prior: 50728203!
- unNumeroDePeano

	(unNumeroDePeano = I) ifTrue:[^self previous]
							    ifFalse:[^self previous - unNumeroDePeano previous]! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:46:56' prior: 50728211!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							    ifFalse:[^self previous - unNumeroDePeano previous]! !

II - I !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:47:23' prior: 50728219!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!II class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 20:51:13'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!I class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 20:51:32'!
* unNumeroDePeano
	
	^unNumeroDePeano! !

I * II!

II + II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
previous

	^previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:17'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:18'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:18'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:18'!
previous

	^previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:18'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:18'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

IIII * III!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: #'Axiomas Peano'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous

	^previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: #'Axiomas Peano'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous

	^previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: #'Axiomas Peano'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous

	^previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: #'Axiomas Peano'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous

	^previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous

	^previous! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:28'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
previous

	^previous! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
previous

	^previous! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
- unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
previous

	^previous! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:52:29'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !

II removeAllNext !

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!II class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 20:53:46'!
/ unNumeroDePeano

	! !
!I class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 20:55:27'!
/ unNumeroDePeano

	unNumeroDePeano = I ifTrue: [^I]
							  ifFalse: [self Error]! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 20:55:36' prior: 50728829!
/ unNumeroDePeano

	

	! !

ObjectBuilder create: #Verdadero
	collaboratorNames: ''
	in: 'Booleanos'
	!

!classDefinition: #Verdadero category: #Booleanos!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleanos'!

!classDefinition: 'Verdadero class' category: #Booleanos!
Verdadero class
	instanceVariableNames: ''!

ObjectBuilder create: #Falso
	collaboratorNames: ''
	in: 'Booleanos'
	!

!classDefinition: #Falso category: #Booleanos!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleanos'!

!classDefinition: 'Falso class' category: #Booleanos!
Falso class
	instanceVariableNames: ''!
!Verdadero class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:03:16'!
no

	^Falso! !
!Falso class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:03:25'!
no

	^Verdadero! !
!Verdadero class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:04:14'!
y: unBooleano

	^unBooleano ! !
!Falso class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:04:34'!
y: unBooleano

	^self! !
!Verdadero class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:04:54'!
o: unBooleano

	^self! !
!Falso class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:05:16'!
o: unBooleano

	^unBooleano	! !
!Verdadero class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:06:53'!
siVerdadero: aClosure

	^aClosure value! !
!Verdadero class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:07:24'!
siFalso: aClosure

	! !

1 = 2 ifTrue:[Bill energia]!
!Verdadero class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/26/2019 21:08:52' prior: 50728893!
siFalso: aClosure

	^nil! !
!Falso class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:09:18'!
siFalso: aClosure

	^aClosure value! !
!Falso class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:09:38'!
siVerdadero: aClosure

	^nil! !

1 = 2 siVerdadero:[Bill energia]!

Verdadero siVerdadero:[Bill energia]!

Verdadero siFalso:[Bill energia]!

ObjectBuilder create: #BooleanosTests
	collaboratorNames: ''
	in: 'Booleanos'
	!

!classDefinition: #BooleanosTests category: #Booleanos!
DenotativeObject subclass: #BooleanosTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Booleanos'!

!classDefinition: 'BooleanosTests class' category: #Booleanos!
BooleanosTests class
	instanceVariableNames: ''!
!BooleanosTests class methodsFor: 'nil' stamp: 'Santiago Festini 8/26/2019 21:16:02'!
test04VerdaderoyFalsoEsFalso

	self assert: (Verdadero y: Verdadero) = Verdadero.! !

----SNAPSHOT----(26 August 2019 21:30:59) CuisUniversity-3839.image priorSource: 12670406!

----QUIT----(26 August 2019 21:31:02) CuisUniversity-3839.image priorSource: 12713012!

----STARTUP---- (27 August 2019 16:02:10) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!

!Verdadero class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/27/2019 16:04:17' prior: 50728899!
siFalso: aClosure

	^nil! !

----STARTUP---- (29 August 2019 17:48:26) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


1+1!

 2 !

----SNAPSHOT----(29 August 2019 17:50:46) CuisUniversity-3839.image priorSource: 12713104!

[true]whileTrue:[].!

[true]whileTrue:[].!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #SuperclassWithInstVar category: #'__Refactoring-TestData__'!
Object subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

Smalltalk removeClassNamed: #SuperclassWithInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: #'__Refactoring-TestData__'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #SubclassWithInstVar!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/29/2019 18:26:53'!
m1 | a | a := 10.! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/29/2019 18:26:54'!
m1:a! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/29/2019 18:26:55'!
m1 [ :a | ] value: 1! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/29/2019 18:26:56'!
m1 [ | a | ] value! !

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: #'__Refactoring-TestData__'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 8/29/2019 18:26:57'!
m1 | a | ! !

Smalltalk removeClassNamed: #SubclassOfClassToRefactor!

Smalltalk removeClassNamed: #ClassToAddInstVar!

!classDefinition: #ClassToAddInstVar category: #'__Refactoring-TestData__'!
Object subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

Smalltalk removeClassNamed: #ClassToAddInstVar!

#('a' 2 #('c' 3 'a')) explore.!

AssertTest  !

AssertTest  !

AssertTest test01isTruePassWithTrue !

AssertTest test01isTruePassWithTrue !

AssertTest test01isTruePassWithTrue !

AssertTest test01isTruePassWithTrue !

Assert  isTrue: 1 = 2!

Assert  isTrue: 1 = 2!

Object subclass: #Ejercicio14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!

!classDefinition: #Ejercicio14 category: #'Cuis-University-Tests'!
Object subclass: #Ejercicio14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Cuis-University-Tests'!
!Ejercicio14 methodsFor: 'nil' stamp: 'Santiago Festini 8/29/2019 18:43:08'!
test01
	self assert: 1=2! !

|    elements index |
elements:= #(1 2 5 6 9).

odds := OrderedCollection new.

elements do: [:element| 
	element odd ifTrue: [
		odds add: element]].

odds!

#(1 5 9) detect:[:element| element even]!

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/Packages/TerseGuide.pck.st----!

10 * peso +  10 * dollar!

10 * peso +( 10 * dollar)!

10 * peso +( 10 * dollar) - (2 * dollar)!

10 * peso +( 10 * dollar) - (2 * dollar) - (8 * dollar)!

10 * peso +( 10 * dollar) - (2 * dollar)!

10 * peso +( 10 * dollar) - (2 * dollar) - (8 * dollar)!

diezMetros := 10 meter!

diezMetros := 10 * meter!

meter!

BaseUnit!

sesentaPulgadas := 60 * inch!

BaseUnit new metro!

BaseUnit!

BaseUnit initializeNameFomOne: metro nameForMany: metros sign: mt!

BaseUnit initializeNameFomOne: metro nameForMany: metros sign: mt.!

metro := BaseUnit initializeNameFomOne: metro nameForMany: metros sign: mt!

metro := BaseUnit nameForOne: 'metro' nameForMany: 'metros' sign: 'mt'.!

abadaba := 10 * metro.!

----SNAPSHOT----(29 August 2019 21:54:38) CuisUniversity-3839.image priorSource: 12713321!

----QUIT----(29 August 2019 21:54:43) CuisUniversity-3839.image priorSource: 12815777!

----STARTUP---- (2 September 2019 14:55:08) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!

!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:06:35' prior: 50728227!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							"I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]"! !
!II class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 15:09:03'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !
!I class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 15:11:34'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:15:06' prior: 50728840!
/ unNumeroDePeano

	

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:15:14' prior: 50732174!
/ unNumeroDePeano

		

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:18:16' prior: 50732154!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:18:21' prior: 50732179!
/ unNumeroDePeano



"I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]"
		

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:18:31' prior: 50732190!
/ unNumeroDePeano



							"I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]"
		

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:25:27' prior: 50732197!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [Error]]

							"I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]"
		

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:25:38' prior: 50732205!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]

							"I ifTrue:[^self previous]
							 ifFalse:[^self previous - unNumeroDePeano previous]"
		

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:25:51' prior: 50732219!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]

		

	! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:09' prior: 50732233!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !

I * II!

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
previous

	^previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:36'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
previous

	^previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:37'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

IIII * IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: #'Axiomas Peano'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
previous

	^previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: #'Axiomas Peano'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
previous

	^previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: #'Axiomas Peano'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
previous

	^previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: #'Axiomas Peano'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:47'!
previous

	^previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous

	^previous! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous

	^previous! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous

	^previous! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous

	^previous! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
previous

	^previous! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
previous

	^previous! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
previous

	^previous! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
- unNumeroDePeano

	unNumeroDePeano = unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
previous

	^previous! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:26:49'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

IIIII - II!
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:27:39' prior: 50732184!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !

II removeAllNext !

Smalltalk removeClassNamed: #IIIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
previous

	^previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:03'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:04'!
previous

	^previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:04'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:04'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:04'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

IIII * IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: #'Axiomas Peano'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
previous

	^previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: #'Axiomas Peano'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:11'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous

	^previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: #'Axiomas Peano'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous

	^previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: #'Axiomas Peano'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous

	^previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous

	^previous! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous

	^previous! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:12'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous

	^previous! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous

	^previous! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous

	^previous! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous

	^previous! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:13'!
previous

	^previous! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
previous

	^previous! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:28:14'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

IIIII - II!

I - II!

III - IIIII!

III - II!

IIII / II!
!II class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 15:29:36'!
< unNumeroDePeano

	! !
!I class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 15:30:39'!
< unNumeroDePeano

	self = unNumeroDePeano ifTrue: [^false]
								ifFalse:[^true]! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:31:46' prior: 50734361!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !

II removeAllNext !

Smalltalk removeClassNamed: #IIIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
previous

	^previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
previous

	^previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:39'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

IIII * IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: #'Axiomas Peano'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
previous

	^previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:46'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: #'Axiomas Peano'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
previous

	^previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: #'Axiomas Peano'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
previous

	^previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: #'Axiomas Peano'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
previous

	^previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
previous

	^previous! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:47'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
previous

	^previous! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
previous

	^previous! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
previous

	^previous! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
previous

	^previous! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:48'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
previous

	^previous! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
previous

	^previous! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^Error]
																		]
		

	! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
previous

	^previous! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:32:49'!
restaInversa: unNumeroDePeano

	^self previous restaInversa: unNumeroDePeano previous.! !

IIII / II!

IIIIII / III!

IIIIII / II !

III / I!

III / III!

III / II!

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/PeanoTest.st----!
!I class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 15:40:59'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!I class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 15:41:23'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:44:56' prior: 50728833!
/ unNumeroDePeano

	unNumeroDePeano = I ifTrue: [^I]
							  ifFalse: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:46:14' prior: 50735641!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !

I / II!
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:47:12' prior: 50735648!
/ unNumeroDePeano

	unNumeroDePeano = I ifTrue: [^I]
							  ifFalse: [self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !

I / II!

I / II!

I / II!

II / I!

II / III!
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:49:11' prior: 50735656!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:49:21' prior: 50735673!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !

I / II!

I / III!

I !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:50:58' prior: 50735664!
/ unNumeroDePeano

	unNumeroDePeano = I ifTrue: [^I]
							  ifFalse: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !

I / II!

I / II!
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:52:20' prior: 50735680!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayoraaaaaa'! !

I / II!
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:52:43' prior: 50735697!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:57:04' prior: 50735688!
/ unNumeroDePeano

	unNumeroDePeano = self ifTrue: [^self]
							  ifFalse: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 15:57:25' prior: 50735712!
/ unNumeroDePeano

	unNumeroDePeano = I ifTrue: [^I]
							  ifFalse: [self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !

Smalltalk removeClassNamed: #PeanoTest!

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/PeanoTest.st----!

II removeAllNext !

Smalltalk removeClassNamed: #IIIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!
!I class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 16:00:28'!
- unNumeroDePeano

	self error: self descripcionDeErrorDeNumerosNegativosNoSoportados .! !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:00:34' prior: 50735847!
- unNumeroDePeano

	self error: self descripcionDeErrorDeNumerosNegativosNoSoportados .! !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:00:37' prior: 50735854!
- unNumeroDePeano

	^self error: self descripcionDeErrorDeNumerosNegativosNoSoportados .! !
!I class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:00:47' prior: 50735720!
/ unNumeroDePeano

	unNumeroDePeano = I ifTrue: [^I]
							  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor]! !

I - II!
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:01:38' prior: 50732162!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:03:17' prior: 50732244!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self ]
																		]
		

	! !
!II class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 16:03:33'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!II class methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 16:03:42'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:04' prior: 50735883!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !

Smalltalk removeClassNamed: #PeanoTest!

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
previous

	^previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
previous

	^previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:04:19'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/PeanoTest.st----!
!II class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:06:29'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := III.
	previous := I.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:06:29'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := IIII.
	previous := II.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:06:29'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	next := nil.
	previous := III.! !
!Peano class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 16:06:29'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	uno := nil.! !

II class removeSelector: #initializeCollaboratorsFromFile!

III class removeSelector: #initializeCollaboratorsFromFile!

IIII class removeSelector: #initializeCollaboratorsFromFile!

Peano class removeSelector: #initializeCollaboratorsFromFile!

----QUIT----(2 September 2019 16:09:07) CuisUniversity-3839.image priorSource: 12815869!

----STARTUP---- (2 September 2019 17:09:18) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


#select:!

III * IIII!

DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIII class' category: #'Axiomas Peano'!
IIIII class
	instanceVariableNames: 'next previous'!
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:16'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:16'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
previous

	^previous! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIII class' category: #'Axiomas Peano'!
IIIIII class
	instanceVariableNames: 'next previous'!
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
previous

	^previous! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIII class' category: #'Axiomas Peano'!
IIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
previous

	^previous! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIII class' category: #'Axiomas Peano'!
IIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
previous

	^previous! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:17'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
previous

	^previous! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
previous

	^previous! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
previous

	^previous! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIIIIIIIIIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIIIIIIIIIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIIIIIIIIIII class' category: #'Axiomas Peano'!
IIIIIIIIIIII class
	instanceVariableNames: 'next previous'!
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:18'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:19'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:19'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:19'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:19'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:19'!
previous

	^previous! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:19'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:19'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIIIIIIIIIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:19'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

II removeAllNext !

Smalltalk removeClassNamed: #IIIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIIII!

Smalltalk removeClassNamed: #IIIIIIII!

Smalltalk removeClassNamed: #IIIIIII!

Smalltalk removeClassNamed: #IIIIII!

Smalltalk removeClassNamed: #IIIII!

Smalltalk removeClassNamed: #IIII!

Smalltalk removeClassNamed: #III!

II * II!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #III category: #'Axiomas Peano'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

III class
	instanceVariableNames: 'next previous'!

!classDefinition: 'III class' category: #'Axiomas Peano'!
III class
	instanceVariableNames: 'next previous'!
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
previous

	^previous! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!III class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

!classDefinition: #IIII category: #'Axiomas Peano'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Axiomas Peano'!

IIII class
	instanceVariableNames: 'next previous'!

!classDefinition: 'IIII class' category: #'Axiomas Peano'!
IIII class
	instanceVariableNames: 'next previous'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
* unNumeroDePeano

	^ self previous * unNumeroDePeano + unNumeroDePeano! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
+ unNumeroDePeano

	^self previous + unNumeroDePeano next

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
- unNumeroDePeano

	^unNumeroDePeano restaInversa: self.
	
							! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
/ unNumeroDePeano

(unNumeroDePeano  < self)  	
									ifTrue: [^(self - unNumeroDePeano  / unNumeroDePeano ) + I]
									ifFalse: [ unNumeroDePeano = self ifTrue: [^I]
																		  ifFalse: [^self error: self descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor ]
																		]
		

	! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
< unNumeroDePeano

	unNumeroDePeano = I ifTrue:[^false]
							 ifFalse:[^self previous < unNumeroDePeano previous]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor

	^'descripcionDeErrorDeNoSePuedeDividirPorUnNumeroMayor'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
descripcionDeErrorDeNumerosNegativosNoSoportados

	^'descripcionDeErrorDeNumerosNegativosNoSoportados'! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
next

	next ifNil: [next := self cloneNamed: self name, 'I'.
			     next previous: self.].
	
	^next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
previous

	^previous! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:37'!
previous: unNumeroDePeano

	previous := unNumeroDePeano.! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:38'!
removeAllNext

	next ifNotNil:
	[
		next removeAllNext.
		next removeFromSystem.
		next := nil.

	]! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 17:22:38'!
restaInversa: unNumeroDePeano

	^unNumeroDePeano previous - self previous .! !

Smalltalk removeClassNamed: #PeanoTest!

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/PeanoTest.st----!

----End fileIn of /home/sfestini/Desktop/ingenieria1/linux64/CodigoRepetido-Ejercicio.st----!

millisecond!
!CustomerBookTest methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 18:54:28'!
tardaMenosQue: tiempo enUnidad: unidad
	|millisecondsBeforeRunning millisecondsAfterRunning|


	millisecondsBeforeRunning := Time millisecondClockValue * unidad.
	self addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * unidad.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (tiempo * unidad)! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 18:55:52' prior: 50737361!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)
	
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 18:56:55' prior: 50737604!
tardaMenosQue: tiempo enUnidad: unidad
	|millisecondsBeforeRunning millisecondsAfterRunning|


	millisecondsBeforeRunning := Time millisecondClockValue * unidad.
	self addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * unidad.
	
	^self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (tiempo * unidad)! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 18:57:45'!
hacer: aBlock tardaMenosQue: tiempo enUnidad: unidad
	|millisecondsBeforeRunning millisecondsAfterRunning|


	millisecondsBeforeRunning := Time millisecondClockValue * unidad.
	self addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * unidad.
	
	^self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (tiempo * unidad)! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 18:58:03' prior: 50737652!
hacer: aBlock tardaMenosQue: tiempo enUnidad: unidad
	|millisecondsBeforeRunning millisecondsAfterRunning|


	millisecondsBeforeRunning := Time millisecondClockValue * unidad.
	aBlock.
	millisecondsAfterRunning := Time millisecondClockValue * unidad.
	
	^self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (tiempo * unidad)! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 18:58:13' prior: 50737668!
hacer: aBlock tardaMenosQue: tiempo enUnidad: unidad
	|millisecondsBeforeRunning millisecondsAfterRunning|


	millisecondsBeforeRunning := Time millisecondClockValue * unidad.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * unidad.
	
	^self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (tiempo * unidad)! !

CustomerBookTest removeSelector: #tardaMenosQue:enUnidad:!
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:01:04' prior: 50737619!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	^ customerBook hacer: [customerBook addCustomerNamed: 'John Lennon'.] tardaMenosQue: 50 enUnidad: millisecond.
	
	"millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)"
	
! !
!CustomerBook methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 19:02:37'!
hacer: aBlock tardaMenosQue: tiempo enUnidad: unidad
	|millisecondsBeforeRunning millisecondsAfterRunning|


	millisecondsBeforeRunning := Time millisecondClockValue * unidad.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * unidad.
	
	^self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (tiempo * unidad)! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:04:00' prior: 50737378!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	^ customerBook hacer: [customerBook removeCustomerNamed: 'John Lennon'.] tardaMenosQue: 100 enUnidad: millisecond.
		  
	"millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)"
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:04:17' prior: 50737733!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	^ customerBook hacer: [customerBook removeCustomerNamed: paulMcCartney .] tardaMenosQue: 100 enUnidad: millisecond.
		  
	"millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)"
	
! !

CustomerBookTest removeSelector: #hacer:tardaMenosQue:enUnidad:!
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:08:35' prior: 50737398!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]
		hifuds! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:08:42' prior: 50737781!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]
		! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 19:35:50'!
CantidadDeClientes: cantidadDeClientes IncluyeA: customerName
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: customerName .
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = cantidadDeClientes.
			self assert: (customerBook includesCustomerNamed: customerName ) ]
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 19:46:29'!
tryToDo: aBlock catch: exception condition1: assert1Block condition2: assert2Block
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ aBlock.
	self fail ]
		on: exception 
		do: [ :anError | 
			self assert: assert1Block.
			self assert: assert2Block ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:49:51' prior: 50737795!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	customerBook tryToDo: [customerBook addCustomerNamed: '']
					catch: Error
					condition1: [|anError| anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.]
					condition2: [customerBook isEmpty].

	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:50:09' prior: 50737843!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anError|
			
	customerBook := CustomerBook new.

	customerBook tryToDo: [customerBook addCustomerNamed: '']
					catch: Error
					condition1: [anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.]
					condition2: [customerBook isEmpty].

	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:51:11' prior: 50737410!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:51:23' prior: 50737863!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anError|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					catch: Error
					condition1: [anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.]
					condition2: [customerBook isEmpty].

	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:51:49' prior: 50737883!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^ customerBook tryToDo: [customerBook addCustomerNamed: '']
					catch: Error
					condition1: []
					condition2: [].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:52:24' prior: 50737920!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^ customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					catch: NotFound
					condition1: []
					condition2: [].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:52:33' prior: 50737940!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					catch: NotFound
					condition1: []
					condition2: [].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:54:10' prior: 50737961!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					catch: NotFound
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:54:24' prior: 50737982!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					catch: NotFound
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon.].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:55:43' prior: 50738005!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					catch: NotFound
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 19:56:01' prior: 50737827!
tryToDo: aBlock catch: exception condition1: assert1Block condition2: assert2Block
	
	[ aBlock.
	self fail ]
		on: exception 
		do: [ :anError | 
			self assert: assert1Block.
			self assert: assert2Block ]
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 19:56:19' prior: 50738052!
tryToDo: aBlock catch: exception condition1: assert1Block condition2: assert2Block
	
	^[ aBlock.
	self fail ]
		on: exception 
		do: [ :anError | 
			self assert: assert1Block.
			self assert: assert2Block ]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:57:20' prior: 50738028!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					catch: [NotFound]
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 19:57:59' prior: 50738062!
tryToDo: aBlock catch: exception condition1: assert1Block condition2: assert2Block
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [ :anError | 
			self assert: assert1Block.
			self assert: assert2Block ]
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 19:58:09' prior: 50738096!
tryToDo: aBlock catch: exception condition1: assert1Block condition2: assert2Block
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [ :anError | 
			self assert: assert1Block value.
			self assert: assert2Block value.]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 19:58:22' prior: 50738072!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					catch: NotFound
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:00:12' prior: 50737465!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	^customerBook tryToDo: [customerBook suspendCustomerNamed: 'Paul McCartney'.]
					catch: CantSuspend 
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	
	
	"[ customerBook suspendCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:01:07' prior: 50737481!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	
	
	^customerBook tryToDo: [customerBook suspendCustomerNamed: johnLennon.]
					catch: CantSuspend 
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	
	
	"[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 20:03:08'!
tryToDo: aBlock ifItFailsCatch: exception condition1: assert1Block condition2: assert2Block
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [ :anError | 
			self assert: assert1Block value.
			self assert: assert2Block value.]
! !

CustomerBook removeSelector: #tryToDo:catch:condition1:condition2:!
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:03:44' prior: 50737900!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anError|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					condition1: [anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.]
					condition2: [customerBook isEmpty].

	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:03:51' prior: 50738118!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					ifItFailsCatch: NotFound
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:03:58' prior: 50738141!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	^customerBook tryToDo: [customerBook suspendCustomerNamed: 'Paul McCartney'.]
					ifItFailsCatch: CantSuspend 
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	
	
	"[ customerBook suspendCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:04:02' prior: 50738165!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	
	
	^customerBook tryToDo: [customerBook suspendCustomerNamed: johnLennon.]
					ifItFailsCatch: CantSuspend 
					condition1: [customerBook numberOfCustomers = 1.]
					condition2: [customerBook includesCustomerNamed: johnLennon].
	
	
	
	"[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 20:31:00'!
tryToDo: aBlock ifItFailsCatch: exception condition1: assertBlock
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [ assertBlock value.]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:31:07' prior: 50738203!
test03CanNotAddACustomerWithEmptyName 

	| customerBook|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					condition1: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]
	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:31:55' prior: 50738305!
test03CanNotAddACustomerWithEmptyName 

	| customerBook|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					condition1: [ :anError | 
						self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
						self assert: customerBook isEmpty ]
	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 20:32:09'!
tryToDo: aBlock ifItFailsCatch: exception andAssert: assertBlock
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [ assertBlock value.]
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:32:17' prior: 50738326!
test03CanNotAddACustomerWithEmptyName 

	| customerBook|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					andAssert: [ :anError | 
						self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
						self assert: customerBook isEmpty ]
	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !

CustomerBook removeSelector: #tryToDo:ifItFailsCatch:condition1:!

CustomerBook removeSelector: #tryToDo:ifItFailsCatch:condition1:condition2:!
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:33:28' prior: 50738224!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					  ifItFailsCatch: NotFound
					  andAssert: [ :anError | 
						self assert: customerBook numberOfCustomers = 1.
						self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 20:39:27'!
tryToDo: aBlock ifItFailsCatch: exception condition1: assert1Block condition2: assert2Block
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [ :anError | 
			self assert: assert1Block value.
			self assert: assert2Block value.]! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:41:08' prior: 50738355!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anError|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					condition1: [anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.]
					condition2: [customerBook isEmpty .]
	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:41:14' prior: 50738417!
test03CanNotAddACustomerWithEmptyName 

	| customerBook anError|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					condition1: [anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.]
					condition2: [customerBook isEmpty .]
					
	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:42:01' prior: 50738381!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					  ifItFailsCatch: NotFound
					  condition1: [customerBook numberOfCustomers = 1.]
					  condition2: [customerBook includesCustomerNamed: johnLennon.]
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 20:48:24' prior: 50738347!
tryToDo: aBlock ifItFailsCatch: exception andAssert: assertBlock
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: assertBlock value.
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:49:31' prior: 50738438!
test03CanNotAddACustomerWithEmptyName 

	| customerBook|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					andAssert: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]
					
	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 20:51:15' prior: 50738483!
tryToDo: aBlock ifItFailsCatch: exception andAssert: assertBlock
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [ :anError | 
			assertBlock value].
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 20:52:38' prior: 50738512!
tryToDo: aBlock ifItFailsCatch: exception andAssert: assertBlock
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [ :anError | 
			assertBlock].
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 20:52:57' prior: 50738521!
tryToDo: aBlock ifItFailsCatch: exception andAssert: assertBlock
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [assertBlock].
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:53:22' prior: 50738491!
test03CanNotAddACustomerWithEmptyName 

	| customerBook|
			
	customerBook := CustomerBook new.

	^customerBook tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					andAssert: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty]
					
	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:53:51' prior: 50738459!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					  ifItFailsCatch: NotFound
					  andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:54:20' prior: 50738248!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	^customerBook tryToDo: [customerBook suspendCustomerNamed: 'Paul McCartney'.]
					ifItFailsCatch: CantSuspend 
					andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	
	
	"[ customerBook suspendCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:54:48' prior: 50738272!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	
	
	^customerBook tryToDo: [customerBook suspendCustomerNamed: johnLennon.]
					ifItFailsCatch: CantSuspend 
					andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	
	
	"[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:54:56' prior: 50738609!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook suspendCustomerNamed: johnLennon.]
					ifItFailsCatch: CantSuspend 
					andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	
	
	"[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 20:55:03' prior: 50738584!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^customerBook tryToDo: [customerBook suspendCustomerNamed: 'Paul McCartney'.]
					ifItFailsCatch: CantSuspend 
					andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	
	
	"[ customerBook suspendCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBook methodsFor: 'nil' stamp: 'Santiago Festini 9/2/2019 21:15:53'!
a: activeCostumers b: suspendedCostumers c: totalCostumers
	
	self assert: activeCostumers equals: self numberOfActiveCustomers.
	self assert: suspendedCostumers equals: self numberOfSuspendedCustomers.
	self assert: totalCostumers equals: self numberOfCustomers.! !

CustomerBook removeSelector: #tryToDo:ifItFailsCatch:condition1:condition2:!
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 21:18:42'!
checkNumberOfActiveCostumers: activeCostumers numberOfSuspendedCostumers: suspendedCostumers numberOfTotalCostumers: totalCostumers
	
	self assert: activeCostumers equals: self numberOfActiveCustomers.
	self assert: suspendedCostumers equals: self numberOfSuspendedCustomers.
	self assert: totalCostumers equals: self numberOfCustomers.! !

CustomerBook removeSelector: #a:b:c:!

CustomerBook removeSelector: #CantidadDeClientes:IncluyeA:!
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 21:23:16'!
checkNumberOfActiveCustomers: activeCustomers numberOfSuspendedCustomers: suspendedCustomers numberOfTotalCustomers: totalCustomers
	
	self assert: activeCustomers equals: self numberOfActiveCustomers.
	self assert: suspendedCustomers equals: self numberOfSuspendedCustomers.
	self assert: totalCustomers equals: self numberOfCustomers.! !

CustomerBook removeSelector: #checkNumberOfActiveCostumers:numberOfSuspendedCostumers:numberOfTotalCostumers:!
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:26:41' prior: 50737425!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	customerBook checkNumberOfActiveCustomers: 0
	numberOfSuspendedCustomers: 1 
	numberOfTotalCustomers: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	
	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers."
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:27:49' prior: 50738735!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkNumberOfActiveCustomers: 0
	numberOfSuspendedCustomers: 1 
	numberOfTotalCustomers: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	
	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers."
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:28:30' prior: 50738758!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	customerBook checkNumberOfActiveCustomers: 0
	numberOfSuspendedCustomers: 1 
	numberOfTotalCustomers: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	
	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers."
	

	
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 21:28:49' prior: 50738717!
checkNumberOfActiveCustomers: activeCustomers numberOfSuspendedCustomers: suspendedCustomers numberOfTotalCustomers: totalCustomers
	
	self assert: activeCustomers equals: self numberOfActiveCustomers.
	self assert: suspendedCustomers equals: self numberOfSuspendedCustomers.
	self assert: totalCustomers equals: self numberOfCustomers.! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 21:30:13' prior: 50738805!
checkNumberOfActiveCustomers: activeCustomers numberOfSuspendedCustomers: suspendedCustomers numberOfTotalCustomers: totalCustomers
	
	self assert: activeCustomers = self numberOfActiveCustomers.
	self assert: suspendedCustomers = self numberOfSuspendedCustomers.
	self assert: totalCustomers = self numberOfCustomers.! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 21:30:38' prior: 50738820!
checkNumberOfActiveCustomers: activeCustomers numberOfSuspendedCustomers: suspendedCustomers numberOfTotalCustomers: totalCustomers
	
	self assert: activeCustomers == self numberOfActiveCustomers.
	self assert: suspendedCustomers == self numberOfSuspendedCustomers.
	self assert: totalCustomers == self numberOfCustomers.! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 21:30:52' prior: 50738834!
checkNumberOfActiveCustomers: activeCustomers numberOfSuspendedCustomers: suspendedCustomers numberOfTotalCustomers: totalCustomers
	
	self assert: activeCustomers = self numberOfActiveCustomers.
	self assert: suspendedCustomers = self numberOfSuspendedCustomers.
	self assert: totalCustomers = self numberOfCustomers.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:31:34' prior: 50737444!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	customerBook checkNumberOfActiveCustomers: 0
	numberOfSuspendedCustomers: 1 
	numberOfTotalCustomers: 1.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).

	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers."

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:31:52' prior: 50738862!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	customerBook checkNumberOfActiveCustomers: 0
	numberOfSuspendedCustomers: 0
	numberOfTotalCustomers: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).

	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers."

	
! !
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 21:32:27'!
checkNumberOfActiveCustomers: activeCustomers andNumberOfSuspendedCustomers: suspendedCustomers andNumberOfTotalCustomers: totalCustomers
	
	self assert: activeCustomers = self numberOfActiveCustomers.
	self assert: suspendedCustomers = self numberOfSuspendedCustomers.
	self assert: totalCustomers = self numberOfCustomers.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:32:40' prior: 50738887!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	customerBook checkNumberOfActiveCustomers: 0
	andNumberOfSuspendedCustomers: 0
	andNumberOfTotalCustomers: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).

	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers."

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:32:51' prior: 50738781!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	customerBook checkNumberOfActiveCustomers: 0
	andNumberOfSuspendedCustomers: 1 
	andNumberOfTotalCustomers: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	
	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers."
	

	
! !

CustomerBook removeSelector: #checkNumberOfActiveCustomers:numberOfSuspendedCustomers:numberOfTotalCustomers:!
!CustomerBook methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/2/2019 21:42:05'!
doing: aBlock takesLessThan: time inUnit: unit
	|millisecondsBeforeRunning millisecondsAfterRunning|


	millisecondsBeforeRunning := Time millisecondClockValue * unit.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * unit.
	
	^self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (time * unit)! !

CustomerBook removeSelector: #hacer:tardaMenosQue:enUnidad:!
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:42:46' prior: 50737699!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	^ customerBook doing: [customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: 50 inUnit: millisecond.
	
	"millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)"
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/2/2019 21:43:17' prior: 50737756!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	^ customerBook doing: [customerBook removeCustomerNamed: paulMcCartney .] takesLessThan: 100 inUnit: millisecond.
		  
	"millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)"
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/2/2019 21:54:21' prior: 50737550!
removeCustomerNamed: customerName 

	| toBeRemoved |
 
	toBeRemoved _ active detect: [:a | a = customerName] 
		ifNone: [ toBeRemoved _ suspended detect: [:a | a = customerName]
			 ifNone: [^NotFound signal.].].





	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
! !
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/2/2019 21:56:27' prior: 50739038!
removeCustomerNamed: customerName 

	| toBeRemoved |
 
	toBeRemoved _ active detect: [:a | a = customerName] 
		ifNone: [ toBeRemoved _ suspended detect: [:a | a = customerName]
			 ifNone: [^NotFound signal.].
		suspended removeAt: toBeRemoved.
				^ customerName.].
	active removeAt: toBeRemoved.
				^ customerName.		
	





	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
! !
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/2/2019 21:58:58' prior: 50739058!
removeCustomerNamed: customerName 

	| toBeRemoved |
 
	toBeRemoved _ active indexOf: [:a | a = customerName] 
		ifAbsent: [ toBeRemoved _ suspended indexOf: [:a | a = customerName]
			 ifAbsent: [^NotFound signal.].
		suspended removeAt: toBeRemoved.
				^ customerName.].
	active removeAt: toBeRemoved.
				^ customerName.		
	





	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
! !

----QUIT----(2 September 2019 22:01:01) CuisUniversity-3839.image priorSource: 12947047!

----STARTUP---- (3 September 2019 15:24:53) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


|x y|!

x _ OrderedCollection with: 4 with: 3 with: 5 with:1.!

x.!

y _ x remove: 5 ifAbsent: [].!

y!
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/3/2019 15:36:11' prior: 50739081!
removeCustomerNamed: customerName 

	| |
	
	 active remove: customerName ifAbsent: [
		suspended remove: customerName ifAbsent:[
			^NotFound signal.]].


	"toBeRemoved _ active indexOf: [:a | a = customerName] 
		ifAbsent: [ toBeRemoved _ suspended indexOf: [:a | a = customerName]
			 ifAbsent: [^NotFound signal.].
		suspended removeAt: toBeRemoved.
				^ customerName.].
	active removeAt: toBeRemoved.
				^ customerName.		"

	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
! !
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/3/2019 15:36:25' prior: 50739114!
removeCustomerNamed: customerName 
	
	 active remove: customerName ifAbsent: [
		suspended remove: customerName ifAbsent:[
			^NotFound signal.]].


	"toBeRemoved _ active indexOf: [:a | a = customerName] 
		ifAbsent: [ toBeRemoved _ suspended indexOf: [:a | a = customerName]
			 ifAbsent: [^NotFound signal.].
		suspended removeAt: toBeRemoved.
				^ customerName.].
	active removeAt: toBeRemoved.
				^ customerName.		"

	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal."
! !
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/3/2019 15:55:10' prior: 50737527!
addCustomerNamed: aName

	aName isEmpty ifTrue: [ self signalCustomerNameCannotBeEmpty ].
	(self includesCustomerNamed: aName) ifTrue: [ self signalCustomerAlreadyExists ].
	
	active add: aName ! !
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/3/2019 15:56:53' prior: 50739141!
removeCustomerNamed: customerName 
	
	 active remove: customerName ifAbsent: [
		suspended remove: customerName ifAbsent:[
			^NotFound signal.]].
	
	"1 to: active size do: 
	[ :index |
		aName = (active at: index)
			ifTrue: [
				active removeAt: index.
				^ aName 
			] 
	].

	1 to: suspended size do: 	
	[ :index |
		aName = (suspended at: index)
			ifTrue: [
				suspended removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.  "
! !

----QUIT----(3 September 2019 15:57:19) CuisUniversity-3839.image priorSource: 13038486!

----STARTUP---- (4 September 2019 15:47:40) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!

!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/4/2019 15:49:33' prior: 50737541!
numberOfCustomers
	
	^self numberOfActiveCustomers + self numberOfSuspendedCustomers.! !
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/4/2019 15:50:43' prior: 50737575!
suspendCustomerNamed: aName 
	
	"(active includes: aName) ifFalse: [^CantSuspend signal]."
	
	active remove: aName ifAbsent:[^CantSuspend signal].
	
	suspended add: aName
! !
!CustomerBookTest methodsFor: 'nil' stamp: 'Santiago Festini 9/4/2019 15:51:37'!
checkNumberOfActiveCustomers: activeCustomers andNumberOfSuspendedCustomers: suspendedCustomers andNumberOfTotalCustomers: totalCustomers
	
	self assert: activeCustomers = self numberOfActiveCustomers.
	self assert: suspendedCustomers = self numberOfSuspendedCustomers.
	self assert: totalCustomers = self numberOfCustomers.! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/4/2019 15:51:53'!
doing: aBlock takesLessThan: time inUnit: unit
	|millisecondsBeforeRunning millisecondsAfterRunning|


	millisecondsBeforeRunning := Time millisecondClockValue * unit.
	aBlock value.
	millisecondsAfterRunning := Time millisecondClockValue * unit.
	
	^self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (time * unit)! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/4/2019 15:52:04'!
tryToDo: aBlock ifItFailsCatch: exception andAssert: assertBlock
	
	^[ aBlock value.
	self fail ]
		on: exception 
		do: [assertBlock].
! !

CustomerBook removeSelector: #tryToDo:ifItFailsCatch:andAssert:!

CustomerBook removeSelector: #doing:takesLessThan:inUnit:!

CustomerBook removeSelector: #checkNumberOfActiveCustomers:andNumberOfSuspendedCustomers:andNumberOfTotalCustomers:!
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:53:37' prior: 50738994!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	^ self doing: [customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: 50 inUnit: millisecond.
	
	"millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)"
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:54:03' prior: 50739014!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	^ self doing: [customerBook removeCustomerNamed: paulMcCartney .] takesLessThan: 100 inUnit: millisecond.
		  
	"millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook removeCustomerNamed: paulMcCartney.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (100 * millisecond)"
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:54:14' prior: 50738538!
test03CanNotAddACustomerWithEmptyName 

	| customerBook|
			
	customerBook := CustomerBook new.

	^self tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					andAssert: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty]
					
	"[ customerBook addCustomerNamed: ''.
	self fail ]
		on: Error 
		do: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty ]"
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:54:21' prior: 50738559!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^self tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					  ifItFailsCatch: NotFound
					  andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	"[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:54:28' prior: 50738951!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkNumberOfActiveCustomers: 0
	andNumberOfSuspendedCustomers: 1 
	andNumberOfTotalCustomers: 1.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	
	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers."
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:54:35' prior: 50738926!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkNumberOfActiveCustomers: 0
	andNumberOfSuspendedCustomers: 0
	andNumberOfTotalCustomers: 0.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).

	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers."

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:54:43' prior: 50738662!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^self tryToDo: [customerBook suspendCustomerNamed: 'Paul McCartney'.]
					ifItFailsCatch: CantSuspend 
					andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	
	
	"[ customerBook suspendCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:54:48' prior: 50738636!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	^self tryToDo: [customerBook suspendCustomerNamed: johnLennon.]
					ifItFailsCatch: CantSuspend 
					andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	
	
	"[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]"
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'Santiago Festini 9/4/2019 15:56:37'!
checkNumberOfActiveCustomers: activeCustomers andNumberOfSuspendedCustomers: suspendedCustomers andNumberOfTotalCustomers: totalCustomers inBook: aBook
	
	self assert: activeCustomers = aBook numberOfActiveCustomers.
	self assert: suspendedCustomers = aBook numberOfSuspendedCustomers.
	self assert: totalCustomers = aBook numberOfCustomers.! !

CustomerBookTest removeSelector: #checkNumberOfActiveCustomers:andNumberOfSuspendedCustomers:andNumberOfTotalCustomers:!
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:58:05' prior: 50739347!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkNumberOfActiveCustomers: 0
	andNumberOfSuspendedCustomers: 1 
	andNumberOfTotalCustomers: 1
	inBook: customerBook.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	
	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers."
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/4/2019 15:58:24' prior: 50739370!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkNumberOfActiveCustomers: 0
	andNumberOfSuspendedCustomers: 0
	andNumberOfTotalCustomers: 0
	inBook: customerBook.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).

	"self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers."

	
! !

----QUIT----(4 September 2019 17:09:57) CuisUniversity-3839.image priorSource: 13041375!

----STARTUP---- (5 September 2019 17:21:31) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


999999999999999999999999999999999999999999999999999999999999999999999999999 == 999999999999999999999999999999999999999999999999999999999999999999999999999!

999999999999999999999999999999999999999999999999999999999999999999999999999 == 999999999999999999999999999999999999999999999999999999999999999999999999999 true. 25 factorial!

25 factorial!

25 factorial == 25 factorial !

19 factorial == 19 factorial!

19 factorial == 19 factorial!

----STARTUP---- (5 September 2019 19:12:41) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


ObjectBuilder create: #Semaforo
	collaboratorNames: ''
	in: 'Tercera Actividad'
	!

!classDefinition: #Semaforo category: #'Tercera Actividad'!
DenotativeObject subclass: #Semaforo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Tercera Actividad'!

!classDefinition: 'Semaforo class' category: #'Tercera Actividad'!
Semaforo class
	instanceVariableNames: ''!

Semaforo
	collaboratorNames: ''
	in: 'Ejercicio Semaforo'!

!classDefinition: #Semaforo category: #'Ejercicio Semaforo'!
DenotativeObject subclass: #Semaforo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Semaforo'!

!classDefinition: 'Semaforo class' category: #'Ejercicio Semaforo'!
Semaforo class
	instanceVariableNames: ''!

ObjectBuilder create: #Luz
	collaboratorNames: ''
	in: 'Ejercicio Semaforo'
	!

!classDefinition: #Luz category: #'Ejercicio Semaforo'!
DenotativeObject subclass: #Luz
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Semaforo'!

!classDefinition: 'Luz class' category: #'Ejercicio Semaforo'!
Luz class
	instanceVariableNames: ''!

ObjectBuilder create: #Reloj
	collaboratorNames: ''
	in: 'Ejercicio Semaforo'
	!

!classDefinition: #Reloj category: #'Ejercicio Semaforo'!
DenotativeObject subclass: #Reloj
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio Semaforo'!

!classDefinition: 'Reloj class' category: #'Ejercicio Semaforo'!
Reloj class
	instanceVariableNames: ''!

----STARTUP---- (9 September 2019 10:16:29) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!

!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/9/2019 10:16:54' prior: 50739177!
removeCustomerNamed: customerName 
	
	 active remove: customerName ifAbsent: [
		suspended remove: customerName ifAbsent:[
			^NotFound signal.]].
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'Santiago Festini 9/9/2019 10:17:07' prior: 50739208!
suspendCustomerNamed: aName 
	
	
	active remove: aName ifAbsent:[^CantSuspend signal].
	
	suspended add: aName
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/9/2019 10:17:32' prior: 50739260!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	^ self doing: [customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: 50 inUnit: millisecond.
	
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/9/2019 10:17:42' prior: 50739279!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	^ self doing: [customerBook removeCustomerNamed: paulMcCartney .] takesLessThan: 100 inUnit: millisecond.
		  
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/9/2019 10:17:50' prior: 50739302!
test03CanNotAddACustomerWithEmptyName 

	| customerBook|
			
	customerBook := CustomerBook new.

	^self tryToDo: [customerBook addCustomerNamed: '']
					ifItFailsCatch: Error
					andAssert: [ :anError | 
			self assert: anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.
			self assert: customerBook isEmpty]
					
		! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/9/2019 10:17:57' prior: 50739323!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^self tryToDo: [customerBook removeCustomerNamed: 'Paul McCartney'.]
					  ifItFailsCatch: NotFound
					  andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/9/2019 10:18:04' prior: 50739464!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self checkNumberOfActiveCustomers: 0
	andNumberOfSuspendedCustomers: 1 
	andNumberOfTotalCustomers: 1
	inBook: customerBook.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	
	

	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/9/2019 10:18:12' prior: 50739488!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self checkNumberOfActiveCustomers: 0
	andNumberOfSuspendedCustomers: 0
	andNumberOfTotalCustomers: 0
	inBook: customerBook.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/9/2019 10:18:20' prior: 50739395!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	^self tryToDo: [customerBook suspendCustomerNamed: 'Paul McCartney'.]
					ifItFailsCatch: CantSuspend 
					andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	

! !
!CustomerBookTest methodsFor: 'testing' stamp: 'Santiago Festini 9/9/2019 10:18:27' prior: 50739420!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	^self tryToDo: [customerBook suspendCustomerNamed: johnLennon.]
					ifItFailsCatch: CantSuspend 
					andAssert: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
	
	
! !

----QUIT----(9 September 2019 10:18:53) CuisUniversity-3839.image priorSource: 13051582!

----STARTUP---- (9 September 2019 10:22:03) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


----QUIT----(9 September 2019 10:22:33) CuisUniversity-3839.image priorSource: 13056495!

----STARTUP---- (9 September 2019 16:31:00) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


----QUIT----(9 September 2019 16:31:29) CuisUniversity-3839.image priorSource: 13056704!

----STARTUP---- (9 September 2019 16:34:02) as /home/sfestini/Desktop/ingenieria1/linux64/CuisUniversity-3839.image!


----QUIT----(9 September 2019 16:34:16) CuisUniversity-3839.image priorSource: 13056913!